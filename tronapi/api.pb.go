// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.6.1
// source: tronapi/api.proto

package tronapi

import (
	troncore "github.com/Sal-Ali/tron-grpc/troncore"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReturnResponseCode int32

const (
	Return_SUCCESS                         ReturnResponseCode = 0
	Return_SIGERROR                        ReturnResponseCode = 1 // error in signature
	Return_CONTRACT_VALIDATE_ERROR         ReturnResponseCode = 2
	Return_CONTRACT_EXE_ERROR              ReturnResponseCode = 3
	Return_BANDWITH_ERROR                  ReturnResponseCode = 4
	Return_DUP_TRANSACTION_ERROR           ReturnResponseCode = 5
	Return_TAPOS_ERROR                     ReturnResponseCode = 6
	Return_TOO_BIG_TRANSACTION_ERROR       ReturnResponseCode = 7
	Return_TRANSACTION_EXPIRATION_ERROR    ReturnResponseCode = 8
	Return_SERVER_BUSY                     ReturnResponseCode = 9
	Return_NO_CONNECTION                   ReturnResponseCode = 10
	Return_NOT_ENOUGH_EFFECTIVE_CONNECTION ReturnResponseCode = 11
	Return_OTHER_ERROR                     ReturnResponseCode = 20
)

// Enum value maps for ReturnResponseCode.
var (
	ReturnResponseCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "SIGERROR",
		2:  "CONTRACT_VALIDATE_ERROR",
		3:  "CONTRACT_EXE_ERROR",
		4:  "BANDWITH_ERROR",
		5:  "DUP_TRANSACTION_ERROR",
		6:  "TAPOS_ERROR",
		7:  "TOO_BIG_TRANSACTION_ERROR",
		8:  "TRANSACTION_EXPIRATION_ERROR",
		9:  "SERVER_BUSY",
		10: "NO_CONNECTION",
		11: "NOT_ENOUGH_EFFECTIVE_CONNECTION",
		20: "OTHER_ERROR",
	}
	ReturnResponseCode_value = map[string]int32{
		"SUCCESS":                         0,
		"SIGERROR":                        1,
		"CONTRACT_VALIDATE_ERROR":         2,
		"CONTRACT_EXE_ERROR":              3,
		"BANDWITH_ERROR":                  4,
		"DUP_TRANSACTION_ERROR":           5,
		"TAPOS_ERROR":                     6,
		"TOO_BIG_TRANSACTION_ERROR":       7,
		"TRANSACTION_EXPIRATION_ERROR":    8,
		"SERVER_BUSY":                     9,
		"NO_CONNECTION":                   10,
		"NOT_ENOUGH_EFFECTIVE_CONNECTION": 11,
		"OTHER_ERROR":                     20,
	}
)

func (x ReturnResponseCode) Enum() *ReturnResponseCode {
	p := new(ReturnResponseCode)
	*p = x
	return p
}

func (x ReturnResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReturnResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tronapi_api_proto_enumTypes[0].Descriptor()
}

func (ReturnResponseCode) Type() protoreflect.EnumType {
	return &file_tronapi_api_proto_enumTypes[0]
}

func (x ReturnResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReturnResponseCode.Descriptor instead.
func (ReturnResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{0, 0}
}

type TransactionSignWeight_ResultResponseCode int32

const (
	TransactionSignWeight_Result_ENOUGH_PERMISSION      TransactionSignWeight_ResultResponseCode = 0
	TransactionSignWeight_Result_NOT_ENOUGH_PERMISSION  TransactionSignWeight_ResultResponseCode = 1 // error in
	TransactionSignWeight_Result_SIGNATURE_FORMAT_ERROR TransactionSignWeight_ResultResponseCode = 2
	TransactionSignWeight_Result_COMPUTE_ADDRESS_ERROR  TransactionSignWeight_ResultResponseCode = 3
	TransactionSignWeight_Result_PERMISSION_ERROR       TransactionSignWeight_ResultResponseCode = 4 //The key is not in permission
	TransactionSignWeight_Result_OTHER_ERROR            TransactionSignWeight_ResultResponseCode = 20
)

// Enum value maps for TransactionSignWeight_ResultResponseCode.
var (
	TransactionSignWeight_ResultResponseCode_name = map[int32]string{
		0:  "ENOUGH_PERMISSION",
		1:  "NOT_ENOUGH_PERMISSION",
		2:  "SIGNATURE_FORMAT_ERROR",
		3:  "COMPUTE_ADDRESS_ERROR",
		4:  "PERMISSION_ERROR",
		20: "OTHER_ERROR",
	}
	TransactionSignWeight_ResultResponseCode_value = map[string]int32{
		"ENOUGH_PERMISSION":      0,
		"NOT_ENOUGH_PERMISSION":  1,
		"SIGNATURE_FORMAT_ERROR": 2,
		"COMPUTE_ADDRESS_ERROR":  3,
		"PERMISSION_ERROR":       4,
		"OTHER_ERROR":            20,
	}
)

func (x TransactionSignWeight_ResultResponseCode) Enum() *TransactionSignWeight_ResultResponseCode {
	p := new(TransactionSignWeight_ResultResponseCode)
	*p = x
	return p
}

func (x TransactionSignWeight_ResultResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionSignWeight_ResultResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tronapi_api_proto_enumTypes[1].Descriptor()
}

func (TransactionSignWeight_ResultResponseCode) Type() protoreflect.EnumType {
	return &file_tronapi_api_proto_enumTypes[1]
}

func (x TransactionSignWeight_ResultResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionSignWeight_ResultResponseCode.Descriptor instead.
func (TransactionSignWeight_ResultResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{37, 0, 0}
}

type TransactionApprovedList_ResultResponseCode int32

const (
	TransactionApprovedList_Result_SUCCESS                TransactionApprovedList_ResultResponseCode = 0
	TransactionApprovedList_Result_SIGNATURE_FORMAT_ERROR TransactionApprovedList_ResultResponseCode = 1
	TransactionApprovedList_Result_COMPUTE_ADDRESS_ERROR  TransactionApprovedList_ResultResponseCode = 2
	TransactionApprovedList_Result_OTHER_ERROR            TransactionApprovedList_ResultResponseCode = 20
)

// Enum value maps for TransactionApprovedList_ResultResponseCode.
var (
	TransactionApprovedList_ResultResponseCode_name = map[int32]string{
		0:  "SUCCESS",
		1:  "SIGNATURE_FORMAT_ERROR",
		2:  "COMPUTE_ADDRESS_ERROR",
		20: "OTHER_ERROR",
	}
	TransactionApprovedList_ResultResponseCode_value = map[string]int32{
		"SUCCESS":                0,
		"SIGNATURE_FORMAT_ERROR": 1,
		"COMPUTE_ADDRESS_ERROR":  2,
		"OTHER_ERROR":            20,
	}
)

func (x TransactionApprovedList_ResultResponseCode) Enum() *TransactionApprovedList_ResultResponseCode {
	p := new(TransactionApprovedList_ResultResponseCode)
	*p = x
	return p
}

func (x TransactionApprovedList_ResultResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransactionApprovedList_ResultResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_tronapi_api_proto_enumTypes[2].Descriptor()
}

func (TransactionApprovedList_ResultResponseCode) Type() protoreflect.EnumType {
	return &file_tronapi_api_proto_enumTypes[2]
}

func (x TransactionApprovedList_ResultResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransactionApprovedList_ResultResponseCode.Descriptor instead.
func (TransactionApprovedList_ResultResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{38, 0, 0}
}

type Return struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool               `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Code    ReturnResponseCode `protobuf:"varint,2,opt,name=code,proto3,enum=tronprotocol.ReturnResponseCode" json:"code,omitempty"`
	Message []byte             `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Return) Reset() {
	*x = Return{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Return) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Return) ProtoMessage() {}

func (x *Return) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Return.ProtoReflect.Descriptor instead.
func (*Return) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{0}
}

func (x *Return) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *Return) GetCode() ReturnResponseCode {
	if x != nil {
		return x.Code
	}
	return Return_SUCCESS
}

func (x *Return) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type BlockReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockNum  int64  `protobuf:"varint,1,opt,name=block_num,json=blockNum,proto3" json:"block_num,omitempty"`
	BlockHash []byte `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (x *BlockReference) Reset() {
	*x = BlockReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReference) ProtoMessage() {}

func (x *BlockReference) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReference.ProtoReflect.Descriptor instead.
func (*BlockReference) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{1}
}

func (x *BlockReference) GetBlockNum() int64 {
	if x != nil {
		return x.BlockNum
	}
	return 0
}

func (x *BlockReference) GetBlockHash() []byte {
	if x != nil {
		return x.BlockHash
	}
	return nil
}

type WitnessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Witnesses []*troncore.Witness `protobuf:"bytes,1,rep,name=witnesses,proto3" json:"witnesses,omitempty"`
}

func (x *WitnessList) Reset() {
	*x = WitnessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessList) ProtoMessage() {}

func (x *WitnessList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessList.ProtoReflect.Descriptor instead.
func (*WitnessList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{2}
}

func (x *WitnessList) GetWitnesses() []*troncore.Witness {
	if x != nil {
		return x.Witnesses
	}
	return nil
}

type ProposalList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proposals []*troncore.Proposal `protobuf:"bytes,1,rep,name=proposals,proto3" json:"proposals,omitempty"`
}

func (x *ProposalList) Reset() {
	*x = ProposalList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposalList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposalList) ProtoMessage() {}

func (x *ProposalList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposalList.ProtoReflect.Descriptor instead.
func (*ProposalList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{3}
}

func (x *ProposalList) GetProposals() []*troncore.Proposal {
	if x != nil {
		return x.Proposals
	}
	return nil
}

type ExchangeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchanges []*troncore.Exchange `protobuf:"bytes,1,rep,name=exchanges,proto3" json:"exchanges,omitempty"`
}

func (x *ExchangeList) Reset() {
	*x = ExchangeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeList) ProtoMessage() {}

func (x *ExchangeList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeList.ProtoReflect.Descriptor instead.
func (*ExchangeList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{4}
}

func (x *ExchangeList) GetExchanges() []*troncore.Exchange {
	if x != nil {
		return x.Exchanges
	}
	return nil
}

type AssetIssueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetIssue []*troncore.AssetIssueContract `protobuf:"bytes,1,rep,name=assetIssue,proto3" json:"assetIssue,omitempty"`
}

func (x *AssetIssueList) Reset() {
	*x = AssetIssueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetIssueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetIssueList) ProtoMessage() {}

func (x *AssetIssueList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetIssueList.ProtoReflect.Descriptor instead.
func (*AssetIssueList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{5}
}

func (x *AssetIssueList) GetAssetIssue() []*troncore.AssetIssueContract {
	if x != nil {
		return x.AssetIssue
	}
	return nil
}

type BlockList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []*troncore.Block `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
}

func (x *BlockList) Reset() {
	*x = BlockList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockList) ProtoMessage() {}

func (x *BlockList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockList.ProtoReflect.Descriptor instead.
func (*BlockList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{6}
}

func (x *BlockList) GetBlock() []*troncore.Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type TransactionList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []*troncore.Transaction `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionList) Reset() {
	*x = TransactionList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionList) ProtoMessage() {}

func (x *TransactionList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionList.ProtoReflect.Descriptor instead.
func (*TransactionList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{7}
}

func (x *TransactionList) GetTransaction() []*troncore.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionIdList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TxId []string `protobuf:"bytes,1,rep,name=txId,proto3" json:"txId,omitempty"`
}

func (x *TransactionIdList) Reset() {
	*x = TransactionIdList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionIdList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionIdList) ProtoMessage() {}

func (x *TransactionIdList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionIdList.ProtoReflect.Descriptor instead.
func (*TransactionIdList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{8}
}

func (x *TransactionIdList) GetTxId() []string {
	if x != nil {
		return x.TxId
	}
	return nil
}

type DelegatedResourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromAddress []byte `protobuf:"bytes,1,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress   []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
}

func (x *DelegatedResourceMessage) Reset() {
	*x = DelegatedResourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedResourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedResourceMessage) ProtoMessage() {}

func (x *DelegatedResourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedResourceMessage.ProtoReflect.Descriptor instead.
func (*DelegatedResourceMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{9}
}

func (x *DelegatedResourceMessage) GetFromAddress() []byte {
	if x != nil {
		return x.FromAddress
	}
	return nil
}

func (x *DelegatedResourceMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

type DelegatedResourceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatedResource []*troncore.DelegatedResource `protobuf:"bytes,1,rep,name=delegatedResource,proto3" json:"delegatedResource,omitempty"`
}

func (x *DelegatedResourceList) Reset() {
	*x = DelegatedResourceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatedResourceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatedResourceList) ProtoMessage() {}

func (x *DelegatedResourceList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatedResourceList.ProtoReflect.Descriptor instead.
func (*DelegatedResourceList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{10}
}

func (x *DelegatedResourceList) GetDelegatedResource() []*troncore.DelegatedResource {
	if x != nil {
		return x.DelegatedResource
	}
	return nil
}

// Gossip node list
type NodeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *NodeList) Reset() {
	*x = NodeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeList) ProtoMessage() {}

func (x *NodeList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeList.ProtoReflect.Descriptor instead.
func (*NodeList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{11}
}

func (x *NodeList) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

// Gossip node
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{12}
}

func (x *Node) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// Gossip node address
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host []byte `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{13}
}

func (x *Address) GetHost() []byte {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *Address) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type EmptyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyMessage) Reset() {
	*x = EmptyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyMessage) ProtoMessage() {}

func (x *EmptyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyMessage.ProtoReflect.Descriptor instead.
func (*EmptyMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{14}
}

type NumberMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num int64 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
}

func (x *NumberMessage) Reset() {
	*x = NumberMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NumberMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NumberMessage) ProtoMessage() {}

func (x *NumberMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NumberMessage.ProtoReflect.Descriptor instead.
func (*NumberMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{15}
}

func (x *NumberMessage) GetNum() int64 {
	if x != nil {
		return x.Num
	}
	return 0
}

type BytesMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BytesMessage) Reset() {
	*x = BytesMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BytesMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesMessage) ProtoMessage() {}

func (x *BytesMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesMessage.ProtoReflect.Descriptor instead.
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{16}
}

func (x *BytesMessage) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type TimeMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BeginInMilliseconds int64 `protobuf:"varint,1,opt,name=beginInMilliseconds,proto3" json:"beginInMilliseconds,omitempty"`
	EndInMilliseconds   int64 `protobuf:"varint,2,opt,name=endInMilliseconds,proto3" json:"endInMilliseconds,omitempty"`
}

func (x *TimeMessage) Reset() {
	*x = TimeMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeMessage) ProtoMessage() {}

func (x *TimeMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeMessage.ProtoReflect.Descriptor instead.
func (*TimeMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{17}
}

func (x *TimeMessage) GetBeginInMilliseconds() int64 {
	if x != nil {
		return x.BeginInMilliseconds
	}
	return 0
}

func (x *TimeMessage) GetEndInMilliseconds() int64 {
	if x != nil {
		return x.EndInMilliseconds
	}
	return 0
}

type BlockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdOrNum string `protobuf:"bytes,1,opt,name=id_or_num,json=idOrNum,proto3" json:"id_or_num,omitempty"`
	Detail  bool   `protobuf:"varint,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *BlockReq) Reset() {
	*x = BlockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockReq) ProtoMessage() {}

func (x *BlockReq) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockReq.ProtoReflect.Descriptor instead.
func (*BlockReq) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{18}
}

func (x *BlockReq) GetIdOrNum() string {
	if x != nil {
		return x.IdOrNum
	}
	return ""
}

func (x *BlockReq) GetDetail() bool {
	if x != nil {
		return x.Detail
	}
	return false
}

type BlockLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartNum int64 `protobuf:"varint,1,opt,name=startNum,proto3" json:"startNum,omitempty"`
	EndNum   int64 `protobuf:"varint,2,opt,name=endNum,proto3" json:"endNum,omitempty"`
}

func (x *BlockLimit) Reset() {
	*x = BlockLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockLimit) ProtoMessage() {}

func (x *BlockLimit) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockLimit.ProtoReflect.Descriptor instead.
func (*BlockLimit) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{19}
}

func (x *BlockLimit) GetStartNum() int64 {
	if x != nil {
		return x.StartNum
	}
	return 0
}

func (x *BlockLimit) GetEndNum() int64 {
	if x != nil {
		return x.EndNum
	}
	return 0
}

type TransactionLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId []byte `protobuf:"bytes,1,opt,name=transactionId,proto3" json:"transactionId,omitempty"`
	LimitNum      int64  `protobuf:"varint,2,opt,name=limitNum,proto3" json:"limitNum,omitempty"`
}

func (x *TransactionLimit) Reset() {
	*x = TransactionLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionLimit) ProtoMessage() {}

func (x *TransactionLimit) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionLimit.ProtoReflect.Descriptor instead.
func (*TransactionLimit) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{20}
}

func (x *TransactionLimit) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionLimit) GetLimitNum() int64 {
	if x != nil {
		return x.LimitNum
	}
	return 0
}

type AccountPaginated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account *troncore.Account `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Offset  int64             `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit   int64             `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *AccountPaginated) Reset() {
	*x = AccountPaginated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountPaginated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountPaginated) ProtoMessage() {}

func (x *AccountPaginated) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountPaginated.ProtoReflect.Descriptor instead.
func (*AccountPaginated) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{21}
}

func (x *AccountPaginated) GetAccount() *troncore.Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *AccountPaginated) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *AccountPaginated) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type TimePaginatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeMessage *TimeMessage `protobuf:"bytes,1,opt,name=timeMessage,proto3" json:"timeMessage,omitempty"`
	Offset      int64        `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit       int64        `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *TimePaginatedMessage) Reset() {
	*x = TimePaginatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimePaginatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimePaginatedMessage) ProtoMessage() {}

func (x *TimePaginatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimePaginatedMessage.ProtoReflect.Descriptor instead.
func (*TimePaginatedMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{22}
}

func (x *TimePaginatedMessage) GetTimeMessage() *TimeMessage {
	if x != nil {
		return x.TimeMessage
	}
	return nil
}

func (x *TimePaginatedMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TimePaginatedMessage) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// deprecated
type AccountNetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeNetUsed    int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit   int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed        int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit       int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed   map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit  map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit  int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
}

func (x *AccountNetMessage) Reset() {
	*x = AccountNetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountNetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountNetMessage) ProtoMessage() {}

func (x *AccountNetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountNetMessage.ProtoReflect.Descriptor instead.
func (*AccountNetMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{23}
}

func (x *AccountNetMessage) GetFreeNetUsed() int64 {
	if x != nil {
		return x.FreeNetUsed
	}
	return 0
}

func (x *AccountNetMessage) GetFreeNetLimit() int64 {
	if x != nil {
		return x.FreeNetLimit
	}
	return 0
}

func (x *AccountNetMessage) GetNetUsed() int64 {
	if x != nil {
		return x.NetUsed
	}
	return 0
}

func (x *AccountNetMessage) GetNetLimit() int64 {
	if x != nil {
		return x.NetLimit
	}
	return 0
}

func (x *AccountNetMessage) GetAssetNetUsed() map[string]int64 {
	if x != nil {
		return x.AssetNetUsed
	}
	return nil
}

func (x *AccountNetMessage) GetAssetNetLimit() map[string]int64 {
	if x != nil {
		return x.AssetNetLimit
	}
	return nil
}

func (x *AccountNetMessage) GetTotalNetLimit() int64 {
	if x != nil {
		return x.TotalNetLimit
	}
	return 0
}

func (x *AccountNetMessage) GetTotalNetWeight() int64 {
	if x != nil {
		return x.TotalNetWeight
	}
	return 0
}

type AccountResourceMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeNetUsed          int64            `protobuf:"varint,1,opt,name=freeNetUsed,proto3" json:"freeNetUsed,omitempty"`
	FreeNetLimit         int64            `protobuf:"varint,2,opt,name=freeNetLimit,proto3" json:"freeNetLimit,omitempty"`
	NetUsed              int64            `protobuf:"varint,3,opt,name=NetUsed,proto3" json:"NetUsed,omitempty"`
	NetLimit             int64            `protobuf:"varint,4,opt,name=NetLimit,proto3" json:"NetLimit,omitempty"`
	AssetNetUsed         map[string]int64 `protobuf:"bytes,5,rep,name=assetNetUsed,proto3" json:"assetNetUsed,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	AssetNetLimit        map[string]int64 `protobuf:"bytes,6,rep,name=assetNetLimit,proto3" json:"assetNetLimit,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	TotalNetLimit        int64            `protobuf:"varint,7,opt,name=TotalNetLimit,proto3" json:"TotalNetLimit,omitempty"`
	TotalNetWeight       int64            `protobuf:"varint,8,opt,name=TotalNetWeight,proto3" json:"TotalNetWeight,omitempty"`
	TotalTronPowerWeight int64            `protobuf:"varint,9,opt,name=TotalTronPowerWeight,proto3" json:"TotalTronPowerWeight,omitempty"`
	TronPowerUsed        int64            `protobuf:"varint,10,opt,name=tronPowerUsed,proto3" json:"tronPowerUsed,omitempty"`
	TronPowerLimit       int64            `protobuf:"varint,11,opt,name=tronPowerLimit,proto3" json:"tronPowerLimit,omitempty"`
	EnergyUsed           int64            `protobuf:"varint,13,opt,name=EnergyUsed,proto3" json:"EnergyUsed,omitempty"`
	EnergyLimit          int64            `protobuf:"varint,14,opt,name=EnergyLimit,proto3" json:"EnergyLimit,omitempty"`
	TotalEnergyLimit     int64            `protobuf:"varint,15,opt,name=TotalEnergyLimit,proto3" json:"TotalEnergyLimit,omitempty"`
	TotalEnergyWeight    int64            `protobuf:"varint,16,opt,name=TotalEnergyWeight,proto3" json:"TotalEnergyWeight,omitempty"`
	StorageUsed          int64            `protobuf:"varint,21,opt,name=storageUsed,proto3" json:"storageUsed,omitempty"`
	StorageLimit         int64            `protobuf:"varint,22,opt,name=storageLimit,proto3" json:"storageLimit,omitempty"`
}

func (x *AccountResourceMessage) Reset() {
	*x = AccountResourceMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountResourceMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountResourceMessage) ProtoMessage() {}

func (x *AccountResourceMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountResourceMessage.ProtoReflect.Descriptor instead.
func (*AccountResourceMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{24}
}

func (x *AccountResourceMessage) GetFreeNetUsed() int64 {
	if x != nil {
		return x.FreeNetUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetFreeNetLimit() int64 {
	if x != nil {
		return x.FreeNetLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetNetUsed() int64 {
	if x != nil {
		return x.NetUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetNetLimit() int64 {
	if x != nil {
		return x.NetLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetAssetNetUsed() map[string]int64 {
	if x != nil {
		return x.AssetNetUsed
	}
	return nil
}

func (x *AccountResourceMessage) GetAssetNetLimit() map[string]int64 {
	if x != nil {
		return x.AssetNetLimit
	}
	return nil
}

func (x *AccountResourceMessage) GetTotalNetLimit() int64 {
	if x != nil {
		return x.TotalNetLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalNetWeight() int64 {
	if x != nil {
		return x.TotalNetWeight
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalTronPowerWeight() int64 {
	if x != nil {
		return x.TotalTronPowerWeight
	}
	return 0
}

func (x *AccountResourceMessage) GetTronPowerUsed() int64 {
	if x != nil {
		return x.TronPowerUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetTronPowerLimit() int64 {
	if x != nil {
		return x.TronPowerLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetEnergyUsed() int64 {
	if x != nil {
		return x.EnergyUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetEnergyLimit() int64 {
	if x != nil {
		return x.EnergyLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalEnergyLimit() int64 {
	if x != nil {
		return x.TotalEnergyLimit
	}
	return 0
}

func (x *AccountResourceMessage) GetTotalEnergyWeight() int64 {
	if x != nil {
		return x.TotalEnergyWeight
	}
	return 0
}

func (x *AccountResourceMessage) GetStorageUsed() int64 {
	if x != nil {
		return x.StorageUsed
	}
	return 0
}

func (x *AccountResourceMessage) GetStorageLimit() int64 {
	if x != nil {
		return x.StorageLimit
	}
	return 0
}

type PaginatedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Offset int64 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit  int64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PaginatedMessage) Reset() {
	*x = PaginatedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaginatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaginatedMessage) ProtoMessage() {}

func (x *PaginatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaginatedMessage.ProtoReflect.Descriptor instead.
func (*PaginatedMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{25}
}

func (x *PaginatedMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PaginatedMessage) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type EasyTransferMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassPhrase []byte `protobuf:"bytes,1,opt,name=passPhrase,proto3" json:"passPhrase,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount     int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferMessage) Reset() {
	*x = EasyTransferMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferMessage) ProtoMessage() {}

func (x *EasyTransferMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{26}
}

func (x *EasyTransferMessage) GetPassPhrase() []byte {
	if x != nil {
		return x.PassPhrase
	}
	return nil
}

func (x *EasyTransferMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferAssetMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PassPhrase []byte `protobuf:"bytes,1,opt,name=passPhrase,proto3" json:"passPhrase,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	AssetId    string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Amount     int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferAssetMessage) Reset() {
	*x = EasyTransferAssetMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferAssetMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferAssetMessage) ProtoMessage() {}

func (x *EasyTransferAssetMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferAssetMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferAssetMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{27}
}

func (x *EasyTransferAssetMessage) GetPassPhrase() []byte {
	if x != nil {
		return x.PassPhrase
	}
	return nil
}

func (x *EasyTransferAssetMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferAssetMessage) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *EasyTransferAssetMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferByPrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	Amount     int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferByPrivateMessage) Reset() {
	*x = EasyTransferByPrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferByPrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferByPrivateMessage) ProtoMessage() {}

func (x *EasyTransferByPrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferByPrivateMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferByPrivateMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{28}
}

func (x *EasyTransferByPrivateMessage) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *EasyTransferByPrivateMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferByPrivateMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferAssetByPrivateMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	ToAddress  []byte `protobuf:"bytes,2,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	AssetId    string `protobuf:"bytes,3,opt,name=assetId,proto3" json:"assetId,omitempty"`
	Amount     int64  `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *EasyTransferAssetByPrivateMessage) Reset() {
	*x = EasyTransferAssetByPrivateMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferAssetByPrivateMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferAssetByPrivateMessage) ProtoMessage() {}

func (x *EasyTransferAssetByPrivateMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferAssetByPrivateMessage.ProtoReflect.Descriptor instead.
func (*EasyTransferAssetByPrivateMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{29}
}

func (x *EasyTransferAssetByPrivateMessage) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *EasyTransferAssetByPrivateMessage) GetToAddress() []byte {
	if x != nil {
		return x.ToAddress
	}
	return nil
}

func (x *EasyTransferAssetByPrivateMessage) GetAssetId() string {
	if x != nil {
		return x.AssetId
	}
	return ""
}

func (x *EasyTransferAssetByPrivateMessage) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type EasyTransferResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction *troncore.Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Result      *Return               `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	Txid        []byte                `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"` //transaction id =  sha256(transaction.rowdata)
}

func (x *EasyTransferResponse) Reset() {
	*x = EasyTransferResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EasyTransferResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EasyTransferResponse) ProtoMessage() {}

func (x *EasyTransferResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EasyTransferResponse.ProtoReflect.Descriptor instead.
func (*EasyTransferResponse) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{30}
}

func (x *EasyTransferResponse) GetTransaction() *troncore.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *EasyTransferResponse) GetResult() *Return {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *EasyTransferResponse) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

type AddressPrKeyPairMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address    string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PrivateKey string `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (x *AddressPrKeyPairMessage) Reset() {
	*x = AddressPrKeyPairMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressPrKeyPairMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressPrKeyPairMessage) ProtoMessage() {}

func (x *AddressPrKeyPairMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressPrKeyPairMessage.ProtoReflect.Descriptor instead.
func (*AddressPrKeyPairMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{31}
}

func (x *AddressPrKeyPairMessage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *AddressPrKeyPairMessage) GetPrivateKey() string {
	if x != nil {
		return x.PrivateKey
	}
	return ""
}

type TransactionExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction          *troncore.Transaction           `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	Txid                 []byte                          `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"` //transaction id =  sha256(transaction.rowdata)
	ConstantResult       [][]byte                        `protobuf:"bytes,3,rep,name=constant_result,json=constantResult,proto3" json:"constant_result,omitempty"`
	Result               *Return                         `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	EnergyUsed           int64                           `protobuf:"varint,5,opt,name=energy_used,json=energyUsed,proto3" json:"energy_used,omitempty"`
	Logs                 []*troncore.TransactionInfo_Log `protobuf:"bytes,6,rep,name=logs,proto3" json:"logs,omitempty"`
	InternalTransactions []*troncore.InternalTransaction `protobuf:"bytes,7,rep,name=internal_transactions,json=internalTransactions,proto3" json:"internal_transactions,omitempty"`
}

func (x *TransactionExtention) Reset() {
	*x = TransactionExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionExtention) ProtoMessage() {}

func (x *TransactionExtention) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionExtention.ProtoReflect.Descriptor instead.
func (*TransactionExtention) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{32}
}

func (x *TransactionExtention) GetTransaction() *troncore.Transaction {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *TransactionExtention) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *TransactionExtention) GetConstantResult() [][]byte {
	if x != nil {
		return x.ConstantResult
	}
	return nil
}

func (x *TransactionExtention) GetResult() *Return {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionExtention) GetEnergyUsed() int64 {
	if x != nil {
		return x.EnergyUsed
	}
	return 0
}

func (x *TransactionExtention) GetLogs() []*troncore.TransactionInfo_Log {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *TransactionExtention) GetInternalTransactions() []*troncore.InternalTransaction {
	if x != nil {
		return x.InternalTransactions
	}
	return nil
}

type BlockExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionExtention `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	BlockHeader  *troncore.BlockHeader   `protobuf:"bytes,2,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
	Blockid      []byte                  `protobuf:"bytes,3,opt,name=blockid,proto3" json:"blockid,omitempty"`
}

func (x *BlockExtention) Reset() {
	*x = BlockExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockExtention) ProtoMessage() {}

func (x *BlockExtention) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockExtention.ProtoReflect.Descriptor instead.
func (*BlockExtention) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{33}
}

func (x *BlockExtention) GetTransactions() []*TransactionExtention {
	if x != nil {
		return x.Transactions
	}
	return nil
}

func (x *BlockExtention) GetBlockHeader() *troncore.BlockHeader {
	if x != nil {
		return x.BlockHeader
	}
	return nil
}

func (x *BlockExtention) GetBlockid() []byte {
	if x != nil {
		return x.Blockid
	}
	return nil
}

type BlockListExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Block []*BlockExtention `protobuf:"bytes,1,rep,name=block,proto3" json:"block,omitempty"`
}

func (x *BlockListExtention) Reset() {
	*x = BlockListExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockListExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockListExtention) ProtoMessage() {}

func (x *BlockListExtention) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockListExtention.ProtoReflect.Descriptor instead.
func (*BlockListExtention) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{34}
}

func (x *BlockListExtention) GetBlock() []*BlockExtention {
	if x != nil {
		return x.Block
	}
	return nil
}

type TransactionListExtention struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transaction []*TransactionExtention `protobuf:"bytes,1,rep,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionListExtention) Reset() {
	*x = TransactionListExtention{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionListExtention) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionListExtention) ProtoMessage() {}

func (x *TransactionListExtention) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionListExtention.ProtoReflect.Descriptor instead.
func (*TransactionListExtention) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{35}
}

func (x *TransactionListExtention) GetTransaction() []*TransactionExtention {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type BlockIncrementalMerkleTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number     int64                           `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
	MerkleTree *troncore.IncrementalMerkleTree `protobuf:"bytes,2,opt,name=merkleTree,proto3" json:"merkleTree,omitempty"`
}

func (x *BlockIncrementalMerkleTree) Reset() {
	*x = BlockIncrementalMerkleTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlockIncrementalMerkleTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockIncrementalMerkleTree) ProtoMessage() {}

func (x *BlockIncrementalMerkleTree) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockIncrementalMerkleTree.ProtoReflect.Descriptor instead.
func (*BlockIncrementalMerkleTree) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{36}
}

func (x *BlockIncrementalMerkleTree) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *BlockIncrementalMerkleTree) GetMerkleTree() *troncore.IncrementalMerkleTree {
	if x != nil {
		return x.MerkleTree
	}
	return nil
}

type TransactionSignWeight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permission    *troncore.Permission          `protobuf:"bytes,1,opt,name=permission,proto3" json:"permission,omitempty"`
	ApprovedList  [][]byte                      `protobuf:"bytes,2,rep,name=approved_list,json=approvedList,proto3" json:"approved_list,omitempty"`
	CurrentWeight int64                         `protobuf:"varint,3,opt,name=current_weight,json=currentWeight,proto3" json:"current_weight,omitempty"`
	Result        *TransactionSignWeight_Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Transaction   *TransactionExtention         `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionSignWeight) Reset() {
	*x = TransactionSignWeight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSignWeight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignWeight) ProtoMessage() {}

func (x *TransactionSignWeight) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignWeight.ProtoReflect.Descriptor instead.
func (*TransactionSignWeight) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{37}
}

func (x *TransactionSignWeight) GetPermission() *troncore.Permission {
	if x != nil {
		return x.Permission
	}
	return nil
}

func (x *TransactionSignWeight) GetApprovedList() [][]byte {
	if x != nil {
		return x.ApprovedList
	}
	return nil
}

func (x *TransactionSignWeight) GetCurrentWeight() int64 {
	if x != nil {
		return x.CurrentWeight
	}
	return 0
}

func (x *TransactionSignWeight) GetResult() *TransactionSignWeight_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionSignWeight) GetTransaction() *TransactionExtention {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type TransactionApprovedList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ApprovedList [][]byte                        `protobuf:"bytes,2,rep,name=approved_list,json=approvedList,proto3" json:"approved_list,omitempty"`
	Result       *TransactionApprovedList_Result `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
	Transaction  *TransactionExtention           `protobuf:"bytes,5,opt,name=transaction,proto3" json:"transaction,omitempty"`
}

func (x *TransactionApprovedList) Reset() {
	*x = TransactionApprovedList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionApprovedList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionApprovedList) ProtoMessage() {}

func (x *TransactionApprovedList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionApprovedList.ProtoReflect.Descriptor instead.
func (*TransactionApprovedList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{38}
}

func (x *TransactionApprovedList) GetApprovedList() [][]byte {
	if x != nil {
		return x.ApprovedList
	}
	return nil
}

func (x *TransactionApprovedList) GetResult() *TransactionApprovedList_Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *TransactionApprovedList) GetTransaction() *TransactionExtention {
	if x != nil {
		return x.Transaction
	}
	return nil
}

type IvkDecryptParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex int64  `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex   int64  `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ivk             []byte `protobuf:"bytes,3,opt,name=ivk,proto3" json:"ivk,omitempty"`
}

func (x *IvkDecryptParameters) Reset() {
	*x = IvkDecryptParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IvkDecryptParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IvkDecryptParameters) ProtoMessage() {}

func (x *IvkDecryptParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IvkDecryptParameters.ProtoReflect.Descriptor instead.
func (*IvkDecryptParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{39}
}

func (x *IvkDecryptParameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *IvkDecryptParameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *IvkDecryptParameters) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

type IvkDecryptAndMarkParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex int64  `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex   int64  `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ivk             []byte `protobuf:"bytes,5,opt,name=ivk,proto3" json:"ivk,omitempty"`
	Ak              []byte `protobuf:"bytes,3,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk              []byte `protobuf:"bytes,4,opt,name=nk,proto3" json:"nk,omitempty"`
}

func (x *IvkDecryptAndMarkParameters) Reset() {
	*x = IvkDecryptAndMarkParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IvkDecryptAndMarkParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IvkDecryptAndMarkParameters) ProtoMessage() {}

func (x *IvkDecryptAndMarkParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IvkDecryptAndMarkParameters.ProtoReflect.Descriptor instead.
func (*IvkDecryptAndMarkParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{40}
}

func (x *IvkDecryptAndMarkParameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *IvkDecryptAndMarkParameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *IvkDecryptAndMarkParameters) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *IvkDecryptAndMarkParameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *IvkDecryptAndMarkParameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

type OvkDecryptParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex int64  `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex   int64  `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ovk             []byte `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
}

func (x *OvkDecryptParameters) Reset() {
	*x = OvkDecryptParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OvkDecryptParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OvkDecryptParameters) ProtoMessage() {}

func (x *OvkDecryptParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OvkDecryptParameters.ProtoReflect.Descriptor instead.
func (*OvkDecryptParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{41}
}

func (x *OvkDecryptParameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *OvkDecryptParameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *OvkDecryptParameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

type DecryptNotes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteTxs []*DecryptNotes_NoteTx `protobuf:"bytes,1,rep,name=noteTxs,proto3" json:"noteTxs,omitempty"`
}

func (x *DecryptNotes) Reset() {
	*x = DecryptNotes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotes) ProtoMessage() {}

func (x *DecryptNotes) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotes.ProtoReflect.Descriptor instead.
func (*DecryptNotes) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{42}
}

func (x *DecryptNotes) GetNoteTxs() []*DecryptNotes_NoteTx {
	if x != nil {
		return x.NoteTxs
	}
	return nil
}

type DecryptNotesMarked struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteTxs []*DecryptNotesMarked_NoteTx `protobuf:"bytes,1,rep,name=noteTxs,proto3" json:"noteTxs,omitempty"`
}

func (x *DecryptNotesMarked) Reset() {
	*x = DecryptNotesMarked{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesMarked) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesMarked) ProtoMessage() {}

func (x *DecryptNotesMarked) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesMarked.ProtoReflect.Descriptor instead.
func (*DecryptNotesMarked) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{43}
}

func (x *DecryptNotesMarked) GetNoteTxs() []*DecryptNotesMarked_NoteTx {
	if x != nil {
		return x.NoteTxs
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value          int64  `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	PaymentAddress string `protobuf:"bytes,2,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
	Rcm            []byte `protobuf:"bytes,3,opt,name=rcm,proto3" json:"rcm,omitempty"` // random 32
	Memo           []byte `protobuf:"bytes,4,opt,name=memo,proto3" json:"memo,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{44}
}

func (x *Note) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *Note) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

func (x *Note) GetRcm() []byte {
	if x != nil {
		return x.Rcm
	}
	return nil
}

func (x *Note) GetMemo() []byte {
	if x != nil {
		return x.Memo
	}
	return nil
}

type SpendNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note    *Note                              `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Alpha   []byte                             `protobuf:"bytes,4,opt,name=alpha,proto3" json:"alpha,omitempty"` // random number for spend authority signature
	Voucher *troncore.IncrementalMerkleVoucher `protobuf:"bytes,5,opt,name=voucher,proto3" json:"voucher,omitempty"`
	Path    []byte                             `protobuf:"bytes,6,opt,name=path,proto3" json:"path,omitempty"` // path for cm from leaf to root in merkle tree
}

func (x *SpendNote) Reset() {
	*x = SpendNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendNote) ProtoMessage() {}

func (x *SpendNote) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendNote.ProtoReflect.Descriptor instead.
func (*SpendNote) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{45}
}

func (x *SpendNote) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendNote) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *SpendNote) GetVoucher() *troncore.IncrementalMerkleVoucher {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *SpendNote) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

type ReceiveNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note *Note `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *ReceiveNote) Reset() {
	*x = ReceiveNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReceiveNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveNote) ProtoMessage() {}

func (x *ReceiveNote) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveNote.ProtoReflect.Descriptor instead.
func (*ReceiveNote) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{46}
}

func (x *ReceiveNote) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

type PrivateParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransparentFromAddress []byte         `protobuf:"bytes,1,opt,name=transparent_from_address,json=transparentFromAddress,proto3" json:"transparent_from_address,omitempty"`
	Ask                    []byte         `protobuf:"bytes,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk                    []byte         `protobuf:"bytes,3,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                    []byte         `protobuf:"bytes,4,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount             int64          `protobuf:"varint,5,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends         []*SpendNote   `protobuf:"bytes,6,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives       []*ReceiveNote `protobuf:"bytes,7,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress   []byte         `protobuf:"bytes,8,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount               int64          `protobuf:"varint,9,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Timeout                int64          `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"` // timeout in seconds, it works only when it bigger than 0
}

func (x *PrivateParameters) Reset() {
	*x = PrivateParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateParameters) ProtoMessage() {}

func (x *PrivateParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateParameters.ProtoReflect.Descriptor instead.
func (*PrivateParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{47}
}

func (x *PrivateParameters) GetTransparentFromAddress() []byte {
	if x != nil {
		return x.TransparentFromAddress
	}
	return nil
}

func (x *PrivateParameters) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *PrivateParameters) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateParameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateParameters) GetFromAmount() int64 {
	if x != nil {
		return x.FromAmount
	}
	return 0
}

func (x *PrivateParameters) GetShieldedSpends() []*SpendNote {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateParameters) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateParameters) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateParameters) GetToAmount() int64 {
	if x != nil {
		return x.ToAmount
	}
	return 0
}

func (x *PrivateParameters) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type PrivateParametersWithoutAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransparentFromAddress []byte         `protobuf:"bytes,1,opt,name=transparent_from_address,json=transparentFromAddress,proto3" json:"transparent_from_address,omitempty"`
	Ak                     []byte         `protobuf:"bytes,2,opt,name=ak,proto3" json:"ak,omitempty"`
	Nsk                    []byte         `protobuf:"bytes,3,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                    []byte         `protobuf:"bytes,4,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount             int64          `protobuf:"varint,5,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends         []*SpendNote   `protobuf:"bytes,6,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives       []*ReceiveNote `protobuf:"bytes,7,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress   []byte         `protobuf:"bytes,8,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount               int64          `protobuf:"varint,9,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Timeout                int64          `protobuf:"varint,10,opt,name=timeout,proto3" json:"timeout,omitempty"` // timeout in seconds, it works only when it bigger than 0
}

func (x *PrivateParametersWithoutAsk) Reset() {
	*x = PrivateParametersWithoutAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateParametersWithoutAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateParametersWithoutAsk) ProtoMessage() {}

func (x *PrivateParametersWithoutAsk) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateParametersWithoutAsk.ProtoReflect.Descriptor instead.
func (*PrivateParametersWithoutAsk) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{48}
}

func (x *PrivateParametersWithoutAsk) GetTransparentFromAddress() []byte {
	if x != nil {
		return x.TransparentFromAddress
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetFromAmount() int64 {
	if x != nil {
		return x.FromAmount
	}
	return 0
}

func (x *PrivateParametersWithoutAsk) GetShieldedSpends() []*SpendNote {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateParametersWithoutAsk) GetToAmount() int64 {
	if x != nil {
		return x.ToAmount
	}
	return 0
}

func (x *PrivateParametersWithoutAsk) GetTimeout() int64 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SpendAuthSigParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask    []byte `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	TxHash []byte `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Alpha  []byte `protobuf:"bytes,3,opt,name=alpha,proto3" json:"alpha,omitempty"`
}

func (x *SpendAuthSigParameters) Reset() {
	*x = SpendAuthSigParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendAuthSigParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendAuthSigParameters) ProtoMessage() {}

func (x *SpendAuthSigParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendAuthSigParameters.ProtoReflect.Descriptor instead.
func (*SpendAuthSigParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{49}
}

func (x *SpendAuthSigParameters) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *SpendAuthSigParameters) GetTxHash() []byte {
	if x != nil {
		return x.TxHash
	}
	return nil
}

func (x *SpendAuthSigParameters) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

type NfParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note    *Note                              `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Voucher *troncore.IncrementalMerkleVoucher `protobuf:"bytes,2,opt,name=voucher,proto3" json:"voucher,omitempty"`
	Ak      []byte                             `protobuf:"bytes,3,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk      []byte                             `protobuf:"bytes,4,opt,name=nk,proto3" json:"nk,omitempty"`
}

func (x *NfParameters) Reset() {
	*x = NfParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfParameters) ProtoMessage() {}

func (x *NfParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfParameters.ProtoReflect.Descriptor instead.
func (*NfParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{50}
}

func (x *NfParameters) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NfParameters) GetVoucher() *troncore.IncrementalMerkleVoucher {
	if x != nil {
		return x.Voucher
	}
	return nil
}

func (x *NfParameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *NfParameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

type ExpandedSpendingKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask []byte `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk []byte `protobuf:"bytes,2,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk []byte `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
}

func (x *ExpandedSpendingKeyMessage) Reset() {
	*x = ExpandedSpendingKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpandedSpendingKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpandedSpendingKeyMessage) ProtoMessage() {}

func (x *ExpandedSpendingKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpandedSpendingKeyMessage.ProtoReflect.Descriptor instead.
func (*ExpandedSpendingKeyMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{51}
}

func (x *ExpandedSpendingKeyMessage) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *ExpandedSpendingKeyMessage) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *ExpandedSpendingKeyMessage) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

type ViewingKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak []byte `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk []byte `protobuf:"bytes,2,opt,name=nk,proto3" json:"nk,omitempty"`
}

func (x *ViewingKeyMessage) Reset() {
	*x = ViewingKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewingKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewingKeyMessage) ProtoMessage() {}

func (x *ViewingKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewingKeyMessage.ProtoReflect.Descriptor instead.
func (*ViewingKeyMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{52}
}

func (x *ViewingKeyMessage) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *ViewingKeyMessage) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

type IncomingViewingKeyMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ivk []byte `protobuf:"bytes,1,opt,name=ivk,proto3" json:"ivk,omitempty"`
}

func (x *IncomingViewingKeyMessage) Reset() {
	*x = IncomingViewingKeyMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingViewingKeyMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingViewingKeyMessage) ProtoMessage() {}

func (x *IncomingViewingKeyMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingViewingKeyMessage.ProtoReflect.Descriptor instead.
func (*IncomingViewingKeyMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{53}
}

func (x *IncomingViewingKeyMessage) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

type DiversifierMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D []byte `protobuf:"bytes,1,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *DiversifierMessage) Reset() {
	*x = DiversifierMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiversifierMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiversifierMessage) ProtoMessage() {}

func (x *DiversifierMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiversifierMessage.ProtoReflect.Descriptor instead.
func (*DiversifierMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{54}
}

func (x *DiversifierMessage) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

type IncomingViewingKeyDiversifierMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ivk *IncomingViewingKeyMessage `protobuf:"bytes,1,opt,name=ivk,proto3" json:"ivk,omitempty"`
	D   *DiversifierMessage        `protobuf:"bytes,2,opt,name=d,proto3" json:"d,omitempty"`
}

func (x *IncomingViewingKeyDiversifierMessage) Reset() {
	*x = IncomingViewingKeyDiversifierMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingViewingKeyDiversifierMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingViewingKeyDiversifierMessage) ProtoMessage() {}

func (x *IncomingViewingKeyDiversifierMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingViewingKeyDiversifierMessage.ProtoReflect.Descriptor instead.
func (*IncomingViewingKeyDiversifierMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{55}
}

func (x *IncomingViewingKeyDiversifierMessage) GetIvk() *IncomingViewingKeyMessage {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *IncomingViewingKeyDiversifierMessage) GetD() *DiversifierMessage {
	if x != nil {
		return x.D
	}
	return nil
}

type PaymentAddressMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	D              *DiversifierMessage `protobuf:"bytes,1,opt,name=d,proto3" json:"d,omitempty"`
	PkD            []byte              `protobuf:"bytes,2,opt,name=pkD,proto3" json:"pkD,omitempty"`
	PaymentAddress string              `protobuf:"bytes,3,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
}

func (x *PaymentAddressMessage) Reset() {
	*x = PaymentAddressMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentAddressMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentAddressMessage) ProtoMessage() {}

func (x *PaymentAddressMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentAddressMessage.ProtoReflect.Descriptor instead.
func (*PaymentAddressMessage) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{56}
}

func (x *PaymentAddressMessage) GetD() *DiversifierMessage {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *PaymentAddressMessage) GetPkD() []byte {
	if x != nil {
		return x.PkD
	}
	return nil
}

func (x *PaymentAddressMessage) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

type ShieldedAddressInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sk             []byte `protobuf:"bytes,1,opt,name=sk,proto3" json:"sk,omitempty"`
	Ask            []byte `protobuf:"bytes,2,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk            []byte `protobuf:"bytes,3,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk            []byte `protobuf:"bytes,4,opt,name=ovk,proto3" json:"ovk,omitempty"`
	Ak             []byte `protobuf:"bytes,5,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk             []byte `protobuf:"bytes,6,opt,name=nk,proto3" json:"nk,omitempty"`
	Ivk            []byte `protobuf:"bytes,7,opt,name=ivk,proto3" json:"ivk,omitempty"`
	D              []byte `protobuf:"bytes,8,opt,name=d,proto3" json:"d,omitempty"`
	PkD            []byte `protobuf:"bytes,9,opt,name=pkD,proto3" json:"pkD,omitempty"`
	PaymentAddress string `protobuf:"bytes,10,opt,name=payment_address,json=paymentAddress,proto3" json:"payment_address,omitempty"`
}

func (x *ShieldedAddressInfo) Reset() {
	*x = ShieldedAddressInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedAddressInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedAddressInfo) ProtoMessage() {}

func (x *ShieldedAddressInfo) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedAddressInfo.ProtoReflect.Descriptor instead.
func (*ShieldedAddressInfo) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{57}
}

func (x *ShieldedAddressInfo) GetSk() []byte {
	if x != nil {
		return x.Sk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *ShieldedAddressInfo) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *ShieldedAddressInfo) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *ShieldedAddressInfo) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *ShieldedAddressInfo) GetPkD() []byte {
	if x != nil {
		return x.PkD
	}
	return nil
}

func (x *ShieldedAddressInfo) GetPaymentAddress() string {
	if x != nil {
		return x.PaymentAddress
	}
	return ""
}

type NoteParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak    []byte `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk    []byte `protobuf:"bytes,2,opt,name=nk,proto3" json:"nk,omitempty"`
	Note  *Note  `protobuf:"bytes,3,opt,name=note,proto3" json:"note,omitempty"`
	Txid  []byte `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Index int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *NoteParameters) Reset() {
	*x = NoteParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteParameters) ProtoMessage() {}

func (x *NoteParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteParameters.ProtoReflect.Descriptor instead.
func (*NoteParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{58}
}

func (x *NoteParameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *NoteParameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *NoteParameters) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NoteParameters) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *NoteParameters) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type SpendResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  bool   `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SpendResult) Reset() {
	*x = SpendResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendResult) ProtoMessage() {}

func (x *SpendResult) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendResult.ProtoReflect.Descriptor instead.
func (*SpendResult) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{59}
}

func (x *SpendResult) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

func (x *SpendResult) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TransactionInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionInfo []*troncore.TransactionInfo `protobuf:"bytes,1,rep,name=transactionInfo,proto3" json:"transactionInfo,omitempty"`
}

func (x *TransactionInfoList) Reset() {
	*x = TransactionInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionInfoList) ProtoMessage() {}

func (x *TransactionInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionInfoList.ProtoReflect.Descriptor instead.
func (*TransactionInfoList) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{60}
}

func (x *TransactionInfoList) GetTransactionInfo() []*troncore.TransactionInfo {
	if x != nil {
		return x.TransactionInfo
	}
	return nil
}

type SpendNoteTRC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note  *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Alpha []byte `protobuf:"bytes,2,opt,name=alpha,proto3" json:"alpha,omitempty"`
	Root  []byte `protobuf:"bytes,3,opt,name=root,proto3" json:"root,omitempty"`
	Path  []byte `protobuf:"bytes,4,opt,name=path,proto3" json:"path,omitempty"`
	Pos   int64  `protobuf:"varint,5,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SpendNoteTRC20) Reset() {
	*x = SpendNoteTRC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendNoteTRC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendNoteTRC20) ProtoMessage() {}

func (x *SpendNoteTRC20) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendNoteTRC20.ProtoReflect.Descriptor instead.
func (*SpendNoteTRC20) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{61}
}

func (x *SpendNoteTRC20) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendNoteTRC20) GetAlpha() []byte {
	if x != nil {
		return x.Alpha
	}
	return nil
}

func (x *SpendNoteTRC20) GetRoot() []byte {
	if x != nil {
		return x.Root
	}
	return nil
}

func (x *SpendNoteTRC20) GetPath() []byte {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *SpendNoteTRC20) GetPos() int64 {
	if x != nil {
		return x.Pos
	}
	return 0
}

type PrivateShieldedTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ask                           []byte            `protobuf:"bytes,1,opt,name=ask,proto3" json:"ask,omitempty"`
	Nsk                           []byte            `protobuf:"bytes,2,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                           []byte            `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount                    string            `protobuf:"bytes,4,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends                []*SpendNoteTRC20 `protobuf:"bytes,5,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives              []*ReceiveNote    `protobuf:"bytes,6,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress          []byte            `protobuf:"bytes,7,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount                      string            `protobuf:"bytes,8,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Shielded_TRC20ContractAddress []byte            `protobuf:"bytes,9,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
}

func (x *PrivateShieldedTRC20Parameters) Reset() {
	*x = PrivateShieldedTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateShieldedTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateShieldedTRC20Parameters) ProtoMessage() {}

func (x *PrivateShieldedTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateShieldedTRC20Parameters.ProtoReflect.Descriptor instead.
func (*PrivateShieldedTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{62}
}

func (x *PrivateShieldedTRC20Parameters) GetAsk() []byte {
	if x != nil {
		return x.Ask
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetFromAmount() string {
	if x != nil {
		return x.FromAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20Parameters) GetShieldedSpends() []*SpendNoteTRC20 {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateShieldedTRC20Parameters) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

type PrivateShieldedTRC20ParametersWithoutAsk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ak                            []byte            `protobuf:"bytes,1,opt,name=ak,proto3" json:"ak,omitempty"`
	Nsk                           []byte            `protobuf:"bytes,2,opt,name=nsk,proto3" json:"nsk,omitempty"`
	Ovk                           []byte            `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
	FromAmount                    string            `protobuf:"bytes,4,opt,name=from_amount,json=fromAmount,proto3" json:"from_amount,omitempty"`
	ShieldedSpends                []*SpendNoteTRC20 `protobuf:"bytes,5,rep,name=shielded_spends,json=shieldedSpends,proto3" json:"shielded_spends,omitempty"`
	ShieldedReceives              []*ReceiveNote    `protobuf:"bytes,6,rep,name=shielded_receives,json=shieldedReceives,proto3" json:"shielded_receives,omitempty"`
	TransparentToAddress          []byte            `protobuf:"bytes,7,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
	ToAmount                      string            `protobuf:"bytes,8,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	Shielded_TRC20ContractAddress []byte            `protobuf:"bytes,9,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) Reset() {
	*x = PrivateShieldedTRC20ParametersWithoutAsk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateShieldedTRC20ParametersWithoutAsk) ProtoMessage() {}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateShieldedTRC20ParametersWithoutAsk.ProtoReflect.Descriptor instead.
func (*PrivateShieldedTRC20ParametersWithoutAsk) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{63}
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetNsk() []byte {
	if x != nil {
		return x.Nsk
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetFromAmount() string {
	if x != nil {
		return x.FromAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetShieldedSpends() []*SpendNoteTRC20 {
	if x != nil {
		return x.ShieldedSpends
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetShieldedReceives() []*ReceiveNote {
	if x != nil {
		return x.ShieldedReceives
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *PrivateShieldedTRC20ParametersWithoutAsk) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

type ShieldedTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpendDescription     []*troncore.SpendDescription   `protobuf:"bytes,1,rep,name=spend_description,json=spendDescription,proto3" json:"spend_description,omitempty"`
	ReceiveDescription   []*troncore.ReceiveDescription `protobuf:"bytes,2,rep,name=receive_description,json=receiveDescription,proto3" json:"receive_description,omitempty"`
	BindingSignature     []byte                         `protobuf:"bytes,3,opt,name=binding_signature,json=bindingSignature,proto3" json:"binding_signature,omitempty"`
	MessageHash          []byte                         `protobuf:"bytes,4,opt,name=message_hash,json=messageHash,proto3" json:"message_hash,omitempty"`
	TriggerContractInput string                         `protobuf:"bytes,5,opt,name=trigger_contract_input,json=triggerContractInput,proto3" json:"trigger_contract_input,omitempty"`
	ParameterType        string                         `protobuf:"bytes,6,opt,name=parameter_type,json=parameterType,proto3" json:"parameter_type,omitempty"`
}

func (x *ShieldedTRC20Parameters) Reset() {
	*x = ShieldedTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedTRC20Parameters) ProtoMessage() {}

func (x *ShieldedTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedTRC20Parameters.ProtoReflect.Descriptor instead.
func (*ShieldedTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{64}
}

func (x *ShieldedTRC20Parameters) GetSpendDescription() []*troncore.SpendDescription {
	if x != nil {
		return x.SpendDescription
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetReceiveDescription() []*troncore.ReceiveDescription {
	if x != nil {
		return x.ReceiveDescription
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetBindingSignature() []byte {
	if x != nil {
		return x.BindingSignature
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetMessageHash() []byte {
	if x != nil {
		return x.MessageHash
	}
	return nil
}

func (x *ShieldedTRC20Parameters) GetTriggerContractInput() string {
	if x != nil {
		return x.TriggerContractInput
	}
	return ""
}

func (x *ShieldedTRC20Parameters) GetParameterType() string {
	if x != nil {
		return x.ParameterType
	}
	return ""
}

type IvkDecryptTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex               int64    `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex                 int64    `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Shielded_TRC20ContractAddress []byte   `protobuf:"bytes,3,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
	Ivk                           []byte   `protobuf:"bytes,4,opt,name=ivk,proto3" json:"ivk,omitempty"`
	Ak                            []byte   `protobuf:"bytes,5,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk                            []byte   `protobuf:"bytes,6,opt,name=nk,proto3" json:"nk,omitempty"`
	Events                        []string `protobuf:"bytes,7,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *IvkDecryptTRC20Parameters) Reset() {
	*x = IvkDecryptTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IvkDecryptTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IvkDecryptTRC20Parameters) ProtoMessage() {}

func (x *IvkDecryptTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IvkDecryptTRC20Parameters.ProtoReflect.Descriptor instead.
func (*IvkDecryptTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{65}
}

func (x *IvkDecryptTRC20Parameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *IvkDecryptTRC20Parameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *IvkDecryptTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetIvk() []byte {
	if x != nil {
		return x.Ivk
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *IvkDecryptTRC20Parameters) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type OvkDecryptTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartBlockIndex               int64    `protobuf:"varint,1,opt,name=start_block_index,json=startBlockIndex,proto3" json:"start_block_index,omitempty"`
	EndBlockIndex                 int64    `protobuf:"varint,2,opt,name=end_block_index,json=endBlockIndex,proto3" json:"end_block_index,omitempty"`
	Ovk                           []byte   `protobuf:"bytes,3,opt,name=ovk,proto3" json:"ovk,omitempty"`
	Shielded_TRC20ContractAddress []byte   `protobuf:"bytes,4,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
	Events                        []string `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *OvkDecryptTRC20Parameters) Reset() {
	*x = OvkDecryptTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OvkDecryptTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OvkDecryptTRC20Parameters) ProtoMessage() {}

func (x *OvkDecryptTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OvkDecryptTRC20Parameters.ProtoReflect.Descriptor instead.
func (*OvkDecryptTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{66}
}

func (x *OvkDecryptTRC20Parameters) GetStartBlockIndex() int64 {
	if x != nil {
		return x.StartBlockIndex
	}
	return 0
}

func (x *OvkDecryptTRC20Parameters) GetEndBlockIndex() int64 {
	if x != nil {
		return x.EndBlockIndex
	}
	return 0
}

func (x *OvkDecryptTRC20Parameters) GetOvk() []byte {
	if x != nil {
		return x.Ovk
	}
	return nil
}

func (x *OvkDecryptTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

func (x *OvkDecryptTRC20Parameters) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type DecryptNotesTRC20 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteTxs []*DecryptNotesTRC20_NoteTx `protobuf:"bytes,1,rep,name=noteTxs,proto3" json:"noteTxs,omitempty"`
}

func (x *DecryptNotesTRC20) Reset() {
	*x = DecryptNotesTRC20{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesTRC20) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesTRC20) ProtoMessage() {}

func (x *DecryptNotesTRC20) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesTRC20.ProtoReflect.Descriptor instead.
func (*DecryptNotesTRC20) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{67}
}

func (x *DecryptNotesTRC20) GetNoteTxs() []*DecryptNotesTRC20_NoteTx {
	if x != nil {
		return x.NoteTxs
	}
	return nil
}

type NfTRC20Parameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                          *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Ak                            []byte `protobuf:"bytes,2,opt,name=ak,proto3" json:"ak,omitempty"`
	Nk                            []byte `protobuf:"bytes,3,opt,name=nk,proto3" json:"nk,omitempty"`
	Position                      int64  `protobuf:"varint,4,opt,name=position,proto3" json:"position,omitempty"`
	Shielded_TRC20ContractAddress []byte `protobuf:"bytes,5,opt,name=shielded_TRC20_contract_address,json=shieldedTRC20ContractAddress,proto3" json:"shielded_TRC20_contract_address,omitempty"`
}

func (x *NfTRC20Parameters) Reset() {
	*x = NfTRC20Parameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NfTRC20Parameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NfTRC20Parameters) ProtoMessage() {}

func (x *NfTRC20Parameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NfTRC20Parameters.ProtoReflect.Descriptor instead.
func (*NfTRC20Parameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{68}
}

func (x *NfTRC20Parameters) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *NfTRC20Parameters) GetAk() []byte {
	if x != nil {
		return x.Ak
	}
	return nil
}

func (x *NfTRC20Parameters) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *NfTRC20Parameters) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *NfTRC20Parameters) GetShielded_TRC20ContractAddress() []byte {
	if x != nil {
		return x.Shielded_TRC20ContractAddress
	}
	return nil
}

type NullifierResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSpent bool `protobuf:"varint,1,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
}

func (x *NullifierResult) Reset() {
	*x = NullifierResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullifierResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullifierResult) ProtoMessage() {}

func (x *NullifierResult) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullifierResult.ProtoReflect.Descriptor instead.
func (*NullifierResult) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{69}
}

func (x *NullifierResult) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

type ShieldedTRC20TriggerContractParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shielded_TRC20_Parameters *ShieldedTRC20Parameters `protobuf:"bytes,1,opt,name=shielded_TRC20_Parameters,json=shieldedTRC20Parameters,proto3" json:"shielded_TRC20_Parameters,omitempty"`
	SpendAuthoritySignature   []*BytesMessage          `protobuf:"bytes,2,rep,name=spend_authority_signature,json=spendAuthoritySignature,proto3" json:"spend_authority_signature,omitempty"`
	Amount                    string                   `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	TransparentToAddress      []byte                   `protobuf:"bytes,4,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
}

func (x *ShieldedTRC20TriggerContractParameters) Reset() {
	*x = ShieldedTRC20TriggerContractParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldedTRC20TriggerContractParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldedTRC20TriggerContractParameters) ProtoMessage() {}

func (x *ShieldedTRC20TriggerContractParameters) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldedTRC20TriggerContractParameters.ProtoReflect.Descriptor instead.
func (*ShieldedTRC20TriggerContractParameters) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{70}
}

func (x *ShieldedTRC20TriggerContractParameters) GetShielded_TRC20_Parameters() *ShieldedTRC20Parameters {
	if x != nil {
		return x.Shielded_TRC20_Parameters
	}
	return nil
}

func (x *ShieldedTRC20TriggerContractParameters) GetSpendAuthoritySignature() []*BytesMessage {
	if x != nil {
		return x.SpendAuthoritySignature
	}
	return nil
}

func (x *ShieldedTRC20TriggerContractParameters) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *ShieldedTRC20TriggerContractParameters) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

type TransactionSignWeight_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    TransactionSignWeight_ResultResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=tronprotocol.TransactionSignWeight_ResultResponseCode" json:"code,omitempty"`
	Message string                                   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransactionSignWeight_Result) Reset() {
	*x = TransactionSignWeight_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionSignWeight_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionSignWeight_Result) ProtoMessage() {}

func (x *TransactionSignWeight_Result) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionSignWeight_Result.ProtoReflect.Descriptor instead.
func (*TransactionSignWeight_Result) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{37, 0}
}

func (x *TransactionSignWeight_Result) GetCode() TransactionSignWeight_ResultResponseCode {
	if x != nil {
		return x.Code
	}
	return TransactionSignWeight_Result_ENOUGH_PERMISSION
}

func (x *TransactionSignWeight_Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type TransactionApprovedList_Result struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    TransactionApprovedList_ResultResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=tronprotocol.TransactionApprovedList_ResultResponseCode" json:"code,omitempty"`
	Message string                                     `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *TransactionApprovedList_Result) Reset() {
	*x = TransactionApprovedList_Result{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionApprovedList_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionApprovedList_Result) ProtoMessage() {}

func (x *TransactionApprovedList_Result) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionApprovedList_Result.ProtoReflect.Descriptor instead.
func (*TransactionApprovedList_Result) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{38, 0}
}

func (x *TransactionApprovedList_Result) GetCode() TransactionApprovedList_ResultResponseCode {
	if x != nil {
		return x.Code
	}
	return TransactionApprovedList_Result_SUCCESS
}

func (x *TransactionApprovedList_Result) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type DecryptNotes_NoteTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note  *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Txid  []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`    //transaction id =  sha256(transaction.rowdata)
	Index int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"` //the index of note in receive
}

func (x *DecryptNotes_NoteTx) Reset() {
	*x = DecryptNotes_NoteTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotes_NoteTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotes_NoteTx) ProtoMessage() {}

func (x *DecryptNotes_NoteTx) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotes_NoteTx.ProtoReflect.Descriptor instead.
func (*DecryptNotes_NoteTx) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{42, 0}
}

func (x *DecryptNotes_NoteTx) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DecryptNotes_NoteTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DecryptNotes_NoteTx) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

type DecryptNotesMarked_NoteTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note    *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Txid    []byte `protobuf:"bytes,2,opt,name=txid,proto3" json:"txid,omitempty"`    //transaction id =  sha256(transaction.rowdata)
	Index   int32  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"` //the index of note in receive
	IsSpend bool   `protobuf:"varint,4,opt,name=is_spend,json=isSpend,proto3" json:"is_spend,omitempty"`
}

func (x *DecryptNotesMarked_NoteTx) Reset() {
	*x = DecryptNotesMarked_NoteTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesMarked_NoteTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesMarked_NoteTx) ProtoMessage() {}

func (x *DecryptNotesMarked_NoteTx) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesMarked_NoteTx.ProtoReflect.Descriptor instead.
func (*DecryptNotesMarked_NoteTx) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{43, 0}
}

func (x *DecryptNotesMarked_NoteTx) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DecryptNotesMarked_NoteTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DecryptNotesMarked_NoteTx) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DecryptNotesMarked_NoteTx) GetIsSpend() bool {
	if x != nil {
		return x.IsSpend
	}
	return false
}

type DecryptNotesTRC20_NoteTx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Note                 *Note  `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	Position             int64  `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	IsSpent              bool   `protobuf:"varint,3,opt,name=is_spent,json=isSpent,proto3" json:"is_spent,omitempty"`
	Txid                 []byte `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Index                int32  `protobuf:"varint,5,opt,name=index,proto3" json:"index,omitempty"` //the index of note in txid
	ToAmount             string `protobuf:"bytes,6,opt,name=to_amount,json=toAmount,proto3" json:"to_amount,omitempty"`
	TransparentToAddress []byte `protobuf:"bytes,7,opt,name=transparent_to_address,json=transparentToAddress,proto3" json:"transparent_to_address,omitempty"`
}

func (x *DecryptNotesTRC20_NoteTx) Reset() {
	*x = DecryptNotesTRC20_NoteTx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tronapi_api_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecryptNotesTRC20_NoteTx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecryptNotesTRC20_NoteTx) ProtoMessage() {}

func (x *DecryptNotesTRC20_NoteTx) ProtoReflect() protoreflect.Message {
	mi := &file_tronapi_api_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecryptNotesTRC20_NoteTx.ProtoReflect.Descriptor instead.
func (*DecryptNotesTRC20_NoteTx) Descriptor() ([]byte, []int) {
	return file_tronapi_api_proto_rawDescGZIP(), []int{67, 0}
}

func (x *DecryptNotesTRC20_NoteTx) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *DecryptNotesTRC20_NoteTx) GetPosition() int64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *DecryptNotesTRC20_NoteTx) GetIsSpent() bool {
	if x != nil {
		return x.IsSpent
	}
	return false
}

func (x *DecryptNotesTRC20_NoteTx) GetTxid() []byte {
	if x != nil {
		return x.Txid
	}
	return nil
}

func (x *DecryptNotesTRC20_NoteTx) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *DecryptNotesTRC20_NoteTx) GetToAmount() string {
	if x != nil {
		return x.ToAmount
	}
	return ""
}

func (x *DecryptNotesTRC20_NoteTx) GetTransparentToAddress() []byte {
	if x != nil {
		return x.TransparentToAddress
	}
	return nil
}

var File_tronapi_api_proto protoreflect.FileDescriptor

var file_tronapi_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x74, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x1a, 0x13, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x54, 0x72, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x72,
	0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65,
	0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x29, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x74, 0x72, 0x6f,
	0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x27, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x72, 0x6f, 0x6e, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x6d, 0x61,
	0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x74, 0x72, 0x6f, 0x6e, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x03, 0x0a, 0x06, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0xba, 0x02, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x49, 0x47, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x45, 0x58, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x41, 0x4e, 0x44, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x55, 0x50, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05,
	0x12, 0x0f, 0x0a, 0x0b, 0x54, 0x41, 0x50, 0x4f, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x06, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x4f, 0x4f, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x54, 0x52, 0x41,
	0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07,
	0x12, 0x20, 0x0a, 0x1c, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x45, 0x58, 0x50, 0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x42, 0x55, 0x53,
	0x59, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e,
	0x4f, 0x55, 0x47, 0x48, 0x5f, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x49, 0x56, 0x45, 0x5f, 0x43,
	0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x22, 0x4c, 0x0a, 0x0e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x42, 0x0a, 0x0b, 0x57, 0x69,
	0x74, 0x6e, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x09, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x52, 0x09, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x44,
	0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x73, 0x22, 0x44, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x09, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x52, 0x0a, 0x0e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0a,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x22, 0x36,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x4e, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x27, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x49, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64, 0x22,
	0x5a, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x66, 0x0a, 0x15, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x11, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x22, 0x34, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x04, 0x4e, 0x6f, 0x64,
	0x65, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x31, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x22, 0x24, 0x0a, 0x0c, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x6d,
	0x0a, 0x0b, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a,
	0x13, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x62, 0x65, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x2c, 0x0a, 0x11, 0x65, 0x6e, 0x64, 0x49, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x65, 0x6e, 0x64, 0x49,
	0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x3e, 0x0a,
	0x08, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x09, 0x69, 0x64, 0x5f,
	0x6f, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x64,
	0x4f, 0x72, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a,
	0x0a, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x4e, 0x75,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6d, 0x22,
	0x54, 0x0a, 0x10, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x4e, 0x75, 0x6d, 0x22, 0x71, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x54, 0x69, 0x6d,
	0x65, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x91, 0x04, 0x0a,
	0x11, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65,
	0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x55,
	0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x4e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x54,
	0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x1a, 0x3f, 0x0a,
	0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40,
	0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x84, 0x07, 0x0a, 0x16, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66,
	0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x07, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x4e,
	0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55, 0x73, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x55,
	0x73, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0d, 0x61, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x4e, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x65, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x12, 0x32, 0x0a, 0x14, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x14,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x57, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x55, 0x73, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x72, 0x6f,
	0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x55, 0x73, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72,
	0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x74, 0x72, 0x6f, 0x6e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73,
	0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x20,
	0x0a, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x64,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x40, 0x0a, 0x12, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4e, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x40, 0x0a, 0x10, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6b, 0x0a, 0x13, 0x45, 0x61, 0x73,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x8a, 0x01, 0x0a, 0x18, 0x45, 0x61, 0x73, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72, 0x61, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x61, 0x73, 0x73, 0x50, 0x68, 0x72,
	0x61, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x74, 0x0a, 0x1c, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x93, 0x01, 0x0a, 0x21, 0x45, 0x61,
	0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42,
	0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x74, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0x95, 0x01, 0x0a, 0x14, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x53, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x50, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0xee, 0x02, 0x0a,
	0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x75, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x55, 0x73, 0x65, 0x64, 0x12, 0x35,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x52,
	0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x56, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb0, 0x01,
	0x0a, 0x0e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x46, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0c, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x0b, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x64,
	0x22, 0x48, 0x0a, 0x12, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x60, 0x0a, 0x18, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x79, 0x0a, 0x1a,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x6d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x52, 0x0a, 0x6d, 0x65, 0x72,
	0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65, 0x22, 0xbc, 0x04, 0x0a, 0x15, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x1a, 0x92, 0x02, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48,
	0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4e, 0x4f, 0x55, 0x47, 0x48, 0x5f, 0x50, 0x45, 0x52, 0x4d,
	0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e,
	0x41, 0x54, 0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x14, 0x0a, 0x10, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x22, 0xa5, 0x03, 0x0a, 0x17, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x44, 0x0a,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0xd8, 0x01, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x4e,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x64, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54,
	0x55, 0x52, 0x45, 0x5f, 0x46, 0x4f, 0x52, 0x4d, 0x41, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x0f, 0x0a,
	0x0b, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x22, 0x7c,
	0x0a, 0x14, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x76,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x22, 0xa3, 0x01, 0x0a,
	0x1b, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64, 0x4d, 0x61,
	0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x10, 0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69,
	0x76, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x6e, 0x6b, 0x22, 0x7c, 0x0a, 0x14, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10,
	0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b,
	0x22, 0xa7, 0x01, 0x0a, 0x0c, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x54, 0x78, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x1a, 0x5a,
	0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x44,
	0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x64, 0x12, 0x41, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x64, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x52, 0x07, 0x6e, 0x6f, 0x74,
	0x65, 0x54, 0x78, 0x73, 0x1a, 0x75, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x12, 0x26,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x22, 0x6b, 0x0a, 0x04, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x63, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x72, 0x63, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c,
	0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x52, 0x07, 0x76,
	0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x35, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x22, 0x9b, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x6f, 0x41,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22,
	0xa3, 0x03, 0x0a, 0x1b, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x12,
	0x38, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x66,
	0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x46, 0x72,
	0x6f, 0x6d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f,
	0x76, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x40,
	0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65,
	0x52, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x73,
	0x12, 0x46, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x74, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x22, 0x59, 0x0a, 0x16, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x69, 0x67, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73,
	0x6b, 0x12, 0x17, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x06, 0x74, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x22, 0x98, 0x01, 0x0a, 0x0c, 0x4e, 0x66, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x6f, 0x75,
	0x63, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x52, 0x07, 0x76, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x61,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x22, 0x52, 0x0a, 0x1a, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e,
	0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x22,
	0x33, 0x0a, 0x11, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x6e, 0x6b, 0x22, 0x2d, 0x0a, 0x19, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67,
	0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x69, 0x76, 0x6b, 0x22, 0x22, 0x0a, 0x12, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x24, 0x49, 0x6e, 0x63, 0x6f,
	0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x44, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63,
	0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x12, 0x2e, 0x0a, 0x01, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x01, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x15,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x01, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x01, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6b, 0x44, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x70, 0x6b, 0x44, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0xd6, 0x01, 0x0a, 0x13, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6b, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73,
	0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x76, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e,
	0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12, 0x10,
	0x0a, 0x03, 0x69, 0x76, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b,
	0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x70, 0x6b, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x6b, 0x44,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x82, 0x01, 0x0a, 0x0e, 0x4e, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x61, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x3f,
	0x0a, 0x0b, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x5e, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x88, 0x01, 0x0a, 0x0e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x72, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xa0, 0x03, 0x0a, 0x1e, 0x50,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52,
	0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x61, 0x73, 0x6b, 0x12,
	0x10, 0x0a, 0x03, 0x6e, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73,
	0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03,
	0x6f, 0x76, 0x6b, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x52, 0x43, 0x32, 0x30, 0x52, 0x0e, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x65, 0x64, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x10, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa8, 0x03,
	0x0a, 0x28, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6e, 0x73, 0x6b, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x6f, 0x74,
	0x65, 0x54, 0x52, 0x43, 0x32, 0x30, 0x52, 0x0e, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x10, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x73, 0x12, 0x34,
	0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x14,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52,
	0x43, 0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xe6, 0x02, 0x0a, 0x17, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x4b, 0x0a, 0x11, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x51, 0x0a, 0x13, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x12, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x10, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x48, 0x61, 0x73, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x80, 0x02, 0x0a, 0x19, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x65,
	0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f,
	0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x76,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x69, 0x76, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x61, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02,
	0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x19, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x76, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6f, 0x76, 0x6b, 0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43, 0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xbc, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30, 0x12, 0x40, 0x0a,
	0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x73, 0x1a,
	0xe4, 0x01, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x65, 0x54, 0x78, 0x12, 0x26, 0x0a, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x6f, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x11, 0x4e, 0x66, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x26, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x61, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x02, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x1f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x0a, 0x0f, 0x4e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73,
	0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73,
	0x53, 0x70, 0x65, 0x6e, 0x74, 0x22, 0xb1, 0x02, 0x0a, 0x26, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x12, 0x61, 0x0a, 0x19, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x5f, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x17, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x12, 0x56, 0x0a, 0x19, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x17, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x32, 0x80, 0x7a, 0x0a, 0x06, 0x57, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x12, 0x6f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x33, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2d, 0x3a, 0x01, 0x2a, 0x5a, 0x14, 0x12, 0x12, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x12, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x7b, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x15,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x3b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x35, 0x3a, 0x01, 0x2a,
	0x5a, 0x18, 0x12, 0x16, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x22, 0x16, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x79,
	0x69, 0x64, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x5a, 0x1b,
	0x12, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x19, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0xb1, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12,
	0x2f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x5a, 0x1e, 0x12, 0x1c,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65, 0x22, 0x1c, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x72, 0x61, 0x63, 0x65, 0x12, 0x91, 0x01, 0x0a, 0x11, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x41, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x14, 0x42,
	0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x14,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x41, 0x3a, 0x01, 0x2a, 0x5a,
	0x1e, 0x12, 0x1c, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64,
	0x63, 0x61, 0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x1c, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61,
	0x73, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8a, 0x01,
	0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x86, 0x01, 0x0a, 0x0c, 0x53,
	0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x22, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x31, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x12, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x73, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x14, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x73, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x97, 0x01, 0x0a, 0x12, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a,
	0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x76, 0x6f, 0x74, 0x65,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x76, 0x6f, 0x74, 0x65, 0x77, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x27, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x56, 0x6f,
	0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x32, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x56, 0x6f, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x90, 0x01, 0x0a, 0x10, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x22, 0x18, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12, 0x5b, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x32, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x23, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x32, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01,
	0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x32, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x77, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x5b, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x32, 0x12, 0x23, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x15,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x32, 0x12, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0xaa, 0x01, 0x0a, 0x15, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x2b, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x5a,
	0x1f, 0x12, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x22, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x69, 0x70, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x12,
	0x6b, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x32, 0x12, 0x2b, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x0d, 0x46, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x23,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0e, 0x46, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12, 0x23, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x46, 0x72, 0x65, 0x65, 0x7a,
	0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65,
	0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x55,
	0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12,
	0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55,
	0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8a, 0x01, 0x0a,
	0x0d, 0x55, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x23,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e,
	0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72, 0x65, 0x65, 0x7a, 0x65, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x6e, 0x66, 0x72,
	0x65, 0x65, 0x7a, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x12, 0x5b, 0x0a, 0x0e, 0x55, 0x6e, 0x66,
	0x72, 0x65, 0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x32, 0x12, 0x23, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x6e, 0x66, 0x72, 0x65,
	0x65, 0x7a, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x0f, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x62, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x5f, 0x0a, 0x10, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x32, 0x12,
	0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a,
	0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a,
	0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x5a, 0x15, 0x12, 0x13, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65, 0x74, 0x22, 0x13, 0x2f, 0x77,
	0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x12, 0x57, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x32, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x12, 0x25, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0a, 0x42, 0x75, 0x79, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x12, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x75, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f,
	0x42, 0x75, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x75, 0x79, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0b,
	0x53, 0x65, 0x6c, 0x6c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x65, 0x6c, 0x6c, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x25, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x53, 0x65, 0x6c, 0x6c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x11, 0x4d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x27, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x4d,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72,
	0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x1d, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12,
	0x72, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x31, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b, 0x3a, 0x01, 0x2a, 0x5a, 0x13, 0x12, 0x11, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x22, 0x11, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x9a, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x5a, 0x20,
	0x12, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x62, 0x79, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x82, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e,
	0x65, 0x74, 0x12, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x4e, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x6e, 0x65, 0x74, 0x22, 0x15,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x6e, 0x65, 0x74, 0x12, 0x53, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x15, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x1a, 0x24, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x9a, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x12, 0x1b, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x62, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x1b, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x62, 0x79, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x55, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x22, 0x00, 0x12, 0x75, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x22, 0x35, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x3a, 0x01, 0x2a, 0x5a, 0x15,
	0x12, 0x13, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x13, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67,
	0x65, 0x74, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x0c, 0x47, 0x65,
	0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x32, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x7c, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75, 0x6d, 0x22, 0x15, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62,
	0x79, 0x6e, 0x75, 0x6d, 0x12, 0x4d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x42, 0x79, 0x4e, 0x75, 0x6d, 0x32, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x78, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x5a, 0x16, 0x12, 0x14,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x62, 0x79, 0x69, 0x64, 0x22, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x69, 0x64, 0x12, 0x8f, 0x01, 0x0a, 0x13, 0x47,
	0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e, 0x65,
	0x78, 0x74, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x17, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a,
	0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x22,
	0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x62, 0x79, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x54, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x4e,
	0x65, 0x78, 0x74, 0x32, 0x12, 0x18, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x1a, 0x20,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x00, 0x12, 0x92, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42,
	0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74,
	0x22, 0x45, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x12, 0x1b, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62,
	0x79, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x22, 0x1b, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x57, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4e, 0x75, 0x6d, 0x32, 0x12,
	0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00,
	0x12, 0x90, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x22, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62,
	0x79, 0x69, 0x64, 0x12, 0x59, 0x0a, 0x0e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x61, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x22,
	0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x63,
	0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x41, 0x42, 0x49, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x42, 0x49, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x81, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01,
	0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73,
	0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x6d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x73, 0x22, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x73, 0x12, 0xa7, 0x01, 0x0a,
	0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a,
	0x5a, 0x22, 0x12, 0x20, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x61, 0x6c, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x22, 0x3d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x62, 0x79, 0x69, 0x64, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65,
	0x74, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x62, 0x79, 0x69, 0x64, 0x12, 0x82, 0x01,
	0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12,
	0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69,
	0x73, 0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x15, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4f, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x49, 0x3a, 0x01, 0x2a, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x20, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x84, 0x01, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79, 0x49, 0x64,
	0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x5a,
	0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x62, 0x79, 0x69, 0x64, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x62,
	0x79, 0x69, 0x64, 0x12, 0x94, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a,
	0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x63,
	0x68, 0x61, 0x69, 0x6e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x1a,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x90, 0x01, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x3b, 0x3a, 0x01, 0x2a, 0x5a, 0x1b, 0x12, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x19, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xaf, 0x01,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x12, 0x22, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74,
	0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x22, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65,
	0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x8c, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x39, 0x3a, 0x01, 0x2a, 0x5a, 0x1a, 0x12, 0x18, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x18, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x9e,
	0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x78, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x12,
	0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x65, 0x78, 0x74,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x1e, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x65, 0x78, 0x74,
	0x6d, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x93, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x43, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x22, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x5a, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x32, 0x12, 0x1d, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x22, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x00, 0x12, 0x82, 0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x39, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x33, 0x3a, 0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x15, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61, 0x0a, 0x11, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x12, 0x26, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x73, 0x0a, 0x1a, 0x45, 0x61, 0x73,
	0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79,
	0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x41, 0x73, 0x73, 0x65, 0x74, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8e,
	0x01, 0x0a, 0x0c, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45,
	0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01,
	0x2a, 0x5a, 0x16, 0x12, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x65, 0x61, 0x73,
	0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x22, 0x14, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x65, 0x61, 0x73, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0xb2, 0x01, 0x0a, 0x15, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x61, 0x73, 0x79, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x43, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f,
	0x65, 0x61, 0x73, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62, 0x79, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x22, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x65,
	0x61, 0x73, 0x79, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x62, 0x79, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x12, 0x93, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x50, 0x72, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x37, 0x3a, 0x01, 0x2a, 0x5a, 0x19, 0x12, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x17, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x12, 0x1e, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69, 0x64, 0x22, 0x1e, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69, 0x64, 0x12, 0xbb, 0x01,
	0x0a, 0x17, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x12, 0x1f, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x22, 0x1f, 0x2f, 0x77, 0x61, 0x6c,
	0x6c, 0x65, 0x74, 0x2f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x69, 0x67, 0x6e, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x18, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x69, 0x67,
	0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1a, 0x47, 0x65, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00,
	0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0f, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12,
	0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x49, 0x76, 0x6b, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x53,
	0x63, 0x61, 0x6e, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79,
	0x49, 0x76, 0x6b, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x20,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79,
	0x4f, 0x76, 0x6b, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x60, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x48, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x6b, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x73, 0x6b, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6b, 0x46, 0x72, 0x6f, 0x6d, 0x4e, 0x73, 0x6b, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x63, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x49, 0x6e,
	0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x12, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67,
	0x4b, 0x65, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x58,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x71, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x5a,
	0x65, 0x6e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x32, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x52, 0x63, 0x6d, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x44, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x1c, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x7f, 0x0a, 0x2c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b,
	0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x58, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69,
	0x67, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1a,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x79, 0x0a, 0x20, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x2a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41,
	0x73, 0x6b, 0x12, 0x36, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65,
	0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x41, 0x73, 0x6b, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49,
	0x76, 0x6b, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32,
	0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1f, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30, 0x22, 0x00, 0x12, 0x69,
	0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52,
	0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x76, 0x6b, 0x12, 0x27, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b,
	0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74,
	0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30, 0x22, 0x00, 0x12, 0x64, 0x0a, 0x20, 0x49, 0x73, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1d,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12,
	0x7d, 0x0a, 0x27, 0x47, 0x65, 0x74, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43,
	0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x34, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x5a,
	0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1c, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x78, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x1d, 0x47,
	0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xa8, 0x20, 0x0a,
	0x0e, 0x57, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x53, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x12,
	0x7f, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x43, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3d, 0x3a, 0x01, 0x2a, 0x5a, 0x1c, 0x12, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x22, 0x1a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x8b, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x15, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x45, 0x3a, 0x01, 0x2a, 0x5a, 0x20, 0x12, 0x1e,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x22, 0x1e,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x62, 0x79, 0x69, 0x64, 0x12, 0x91,
	0x01, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a,
	0x01, 0x2a, 0x5a, 0x1f, 0x12, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c,
	0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x22, 0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69,
	0x64, 0x69, 0x74, 0x79, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x51, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4b, 0x3a, 0x01, 0x2a, 0x5a, 0x23, 0x12,
	0x21, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x21, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0xbf, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x63, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x5d, 0x3a, 0x01, 0x2a, 0x5a, 0x2c, 0x12,
	0x2a, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x2f, 0x67, 0x65, 0x74, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x69, 0x73, 0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x2a, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x61, 0x73, 0x73, 0x65, 0x74, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x55,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x73, 0x73, 0x75, 0x65, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x73, 0x73, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x22, 0x00, 0x12, 0x85, 0x01, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x45, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x5a, 0x1d, 0x12, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65,
	0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x6f, 0x77,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x1b, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f,
	0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x6e, 0x6f, 0x77, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x12, 0x4a, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x32, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x8c,
	0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d,
	0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x22, 0x49, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x43, 0x3a, 0x01, 0x2a, 0x5a, 0x1f, 0x12,
	0x1d, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x2f, 0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75, 0x6d, 0x22, 0x1d,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x62, 0x79, 0x6e, 0x75, 0x6d, 0x12, 0x4d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x32, 0x12,
	0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x42, 0x79, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x6d, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x2b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x16,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0xa0, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x5a, 0x24, 0x12, 0x22,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x62, 0x79,
	0x69, 0x64, 0x22, 0x22, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x62, 0x79, 0x69, 0x64, 0x12, 0xb0, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1d, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x5b, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x55, 0x3a, 0x01, 0x2a, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x77, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69,
	0x64, 0x22, 0x26, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69,
	0x74, 0x79, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x66, 0x6f, 0x62, 0x79, 0x69, 0x64, 0x12, 0xa3, 0x01, 0x0a, 0x0f, 0x47, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x50, 0x72, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x4d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x47, 0x3a, 0x01, 0x2a, 0x5a, 0x21, 0x12, 0x1f, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x1f,
	0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x73, 0x6f, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x2f,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x67, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x54, 0x72, 0x65, 0x65,
	0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1d, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x2a, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e,
	0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79, 0x49, 0x76, 0x6b, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x65, 0x0a, 0x14, 0x53,
	0x63, 0x61, 0x6e, 0x41, 0x6e, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79,
	0x49, 0x76, 0x6b, 0x12, 0x29, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6e, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x20,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64,
	0x22, 0x00, 0x12, 0x51, 0x0a, 0x0d, 0x53, 0x63, 0x61, 0x6e, 0x4e, 0x6f, 0x74, 0x65, 0x42, 0x79,
	0x4f, 0x76, 0x6b, 0x12, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x07, 0x49, 0x73, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x12, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x19,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1b, 0x53,
	0x63, 0x61, 0x6e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30,
	0x4e, 0x6f, 0x74, 0x65, 0x73, 0x42, 0x79, 0x49, 0x76, 0x6b, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x6f,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x49, 0x76, 0x6b, 0x44, 0x65, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x22, 0x00, 0x12, 0x69, 0x0a, 0x1b, 0x53, 0x63, 0x61, 0x6e, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54, 0x52, 0x43, 0x32, 0x30, 0x4e, 0x6f, 0x74, 0x65, 0x73,
	0x42, 0x79, 0x4f, 0x76, 0x6b, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4f, 0x76, 0x6b, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1f,
	0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x65,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x54, 0x52, 0x43, 0x32, 0x30, 0x22,
	0x00, 0x12, 0x64, 0x0a, 0x20, 0x49, 0x73, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x65, 0x64, 0x54,
	0x52, 0x43, 0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x6f, 0x74, 0x65,
	0x53, 0x70, 0x65, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x66, 0x54, 0x52, 0x43, 0x32, 0x30, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x77, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x63, 0x0a, 0x17, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x53, 0x6d, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x1a, 0x22, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x79, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x12, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x12, 0x47, 0x65, 0x74,
	0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00,
	0x12, 0x56, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x42, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x61, 0x69, 0x72, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x69, 0x72, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x61, 0x69, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0a, 0x47, 0x65,
	0x74, 0x42, 0x75, 0x72, 0x6e, 0x54, 0x72, 0x78, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x16, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xcd, 0x04, 0x0a, 0x0f, 0x57, 0x61, 0x6c, 0x6c,
	0x65, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xb9, 0x01, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x54, 0x68, 0x69, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x59, 0x3a, 0x01,
	0x2a, 0x5a, 0x2a, 0x12, 0x28, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66, 0x72, 0x6f, 0x6d, 0x74, 0x68, 0x69, 0x73, 0x22, 0x28, 0x2f,
	0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f,
	0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x66,
	0x72, 0x6f, 0x6d, 0x74, 0x68, 0x69, 0x73, 0x12, 0x64, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x68,
	0x69, 0x73, 0x32, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0xb3, 0x01,
	0x0a, 0x15, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x12, 0x1e, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x1d, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x5b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x55, 0x3a, 0x01,
	0x2a, 0x5a, 0x28, 0x12, 0x26, 0x2f, 0x77, 0x61, 0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65, 0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x74, 0x68, 0x69, 0x73, 0x22, 0x26, 0x2f, 0x77, 0x61,
	0x6c, 0x6c, 0x65, 0x74, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x65,
	0x74, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x74, 0x6f, 0x74,
	0x68, 0x69, 0x73, 0x12, 0x62, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x6f, 0x54, 0x68, 0x69, 0x73, 0x32, 0x12, 0x1e, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x26, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x32, 0xb9, 0x02, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x67, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1c, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x2e,
	0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x74, 0x72, 0x6f, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x77, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x1a, 0x2e, 0x74, 0x72,
	0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x00, 0x12, 0x43,
	0x0a, 0x0d, 0x47, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x12,
	0x1b, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x22, 0x00, 0x32, 0x8c, 0x01, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x12,
	0x80, 0x01, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19, 0x2e, 0x74,
	0x72, 0x6f, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x39, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x33, 0x3a,
	0x01, 0x2a, 0x5a, 0x17, 0x12, 0x15, 0x2f, 0x6d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x67,
	0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x73, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x15, 0x2f, 0x6d, 0x6f,
	0x6e, 0x69, 0x74, 0x6f, 0x72, 0x2f, 0x67, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x73, 0x69, 0x6e,
	0x66, 0x6f, 0x32, 0x09, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x41, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x2e, 0x74, 0x72, 0x6f, 0x6e, 0x2e, 0x61, 0x70, 0x69, 0x42, 0x0b, 0x54,
	0x72, 0x6f, 0x6e, 0x47, 0x72, 0x70, 0x63, 0x41, 0x50, 0x49, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x61, 0x6c, 0x2d, 0x41, 0x6c, 0x69, 0x2f, 0x74,
	0x72, 0x6f, 0x6e, 0x2d, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x74, 0x72, 0x6f, 0x6e, 0x61, 0x70, 0x69,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tronapi_api_proto_rawDescOnce sync.Once
	file_tronapi_api_proto_rawDescData = file_tronapi_api_proto_rawDesc
)

func file_tronapi_api_proto_rawDescGZIP() []byte {
	file_tronapi_api_proto_rawDescOnce.Do(func() {
		file_tronapi_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_tronapi_api_proto_rawDescData)
	})
	return file_tronapi_api_proto_rawDescData
}

var file_tronapi_api_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_tronapi_api_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_tronapi_api_proto_goTypes = []interface{}{
	(ReturnResponseCode)(0),                         // 0: tronprotocol.Return.response_code
	(TransactionSignWeight_ResultResponseCode)(0),   // 1: tronprotocol.TransactionSignWeight.Result.response_code
	(TransactionApprovedList_ResultResponseCode)(0), // 2: tronprotocol.TransactionApprovedList.Result.response_code
	(*Return)(nil),                                   // 3: tronprotocol.Return
	(*BlockReference)(nil),                           // 4: tronprotocol.BlockReference
	(*WitnessList)(nil),                              // 5: tronprotocol.WitnessList
	(*ProposalList)(nil),                             // 6: tronprotocol.ProposalList
	(*ExchangeList)(nil),                             // 7: tronprotocol.ExchangeList
	(*AssetIssueList)(nil),                           // 8: tronprotocol.AssetIssueList
	(*BlockList)(nil),                                // 9: tronprotocol.BlockList
	(*TransactionList)(nil),                          // 10: tronprotocol.TransactionList
	(*TransactionIdList)(nil),                        // 11: tronprotocol.TransactionIdList
	(*DelegatedResourceMessage)(nil),                 // 12: tronprotocol.DelegatedResourceMessage
	(*DelegatedResourceList)(nil),                    // 13: tronprotocol.DelegatedResourceList
	(*NodeList)(nil),                                 // 14: tronprotocol.NodeList
	(*Node)(nil),                                     // 15: tronprotocol.Node
	(*Address)(nil),                                  // 16: tronprotocol.Address
	(*EmptyMessage)(nil),                             // 17: tronprotocol.EmptyMessage
	(*NumberMessage)(nil),                            // 18: tronprotocol.NumberMessage
	(*BytesMessage)(nil),                             // 19: tronprotocol.BytesMessage
	(*TimeMessage)(nil),                              // 20: tronprotocol.TimeMessage
	(*BlockReq)(nil),                                 // 21: tronprotocol.BlockReq
	(*BlockLimit)(nil),                               // 22: tronprotocol.BlockLimit
	(*TransactionLimit)(nil),                         // 23: tronprotocol.TransactionLimit
	(*AccountPaginated)(nil),                         // 24: tronprotocol.AccountPaginated
	(*TimePaginatedMessage)(nil),                     // 25: tronprotocol.TimePaginatedMessage
	(*AccountNetMessage)(nil),                        // 26: tronprotocol.AccountNetMessage
	(*AccountResourceMessage)(nil),                   // 27: tronprotocol.AccountResourceMessage
	(*PaginatedMessage)(nil),                         // 28: tronprotocol.PaginatedMessage
	(*EasyTransferMessage)(nil),                      // 29: tronprotocol.EasyTransferMessage
	(*EasyTransferAssetMessage)(nil),                 // 30: tronprotocol.EasyTransferAssetMessage
	(*EasyTransferByPrivateMessage)(nil),             // 31: tronprotocol.EasyTransferByPrivateMessage
	(*EasyTransferAssetByPrivateMessage)(nil),        // 32: tronprotocol.EasyTransferAssetByPrivateMessage
	(*EasyTransferResponse)(nil),                     // 33: tronprotocol.EasyTransferResponse
	(*AddressPrKeyPairMessage)(nil),                  // 34: tronprotocol.AddressPrKeyPairMessage
	(*TransactionExtention)(nil),                     // 35: tronprotocol.TransactionExtention
	(*BlockExtention)(nil),                           // 36: tronprotocol.BlockExtention
	(*BlockListExtention)(nil),                       // 37: tronprotocol.BlockListExtention
	(*TransactionListExtention)(nil),                 // 38: tronprotocol.TransactionListExtention
	(*BlockIncrementalMerkleTree)(nil),               // 39: tronprotocol.BlockIncrementalMerkleTree
	(*TransactionSignWeight)(nil),                    // 40: tronprotocol.TransactionSignWeight
	(*TransactionApprovedList)(nil),                  // 41: tronprotocol.TransactionApprovedList
	(*IvkDecryptParameters)(nil),                     // 42: tronprotocol.IvkDecryptParameters
	(*IvkDecryptAndMarkParameters)(nil),              // 43: tronprotocol.IvkDecryptAndMarkParameters
	(*OvkDecryptParameters)(nil),                     // 44: tronprotocol.OvkDecryptParameters
	(*DecryptNotes)(nil),                             // 45: tronprotocol.DecryptNotes
	(*DecryptNotesMarked)(nil),                       // 46: tronprotocol.DecryptNotesMarked
	(*Note)(nil),                                     // 47: tronprotocol.Note
	(*SpendNote)(nil),                                // 48: tronprotocol.SpendNote
	(*ReceiveNote)(nil),                              // 49: tronprotocol.ReceiveNote
	(*PrivateParameters)(nil),                        // 50: tronprotocol.PrivateParameters
	(*PrivateParametersWithoutAsk)(nil),              // 51: tronprotocol.PrivateParametersWithoutAsk
	(*SpendAuthSigParameters)(nil),                   // 52: tronprotocol.SpendAuthSigParameters
	(*NfParameters)(nil),                             // 53: tronprotocol.NfParameters
	(*ExpandedSpendingKeyMessage)(nil),               // 54: tronprotocol.ExpandedSpendingKeyMessage
	(*ViewingKeyMessage)(nil),                        // 55: tronprotocol.ViewingKeyMessage
	(*IncomingViewingKeyMessage)(nil),                // 56: tronprotocol.IncomingViewingKeyMessage
	(*DiversifierMessage)(nil),                       // 57: tronprotocol.DiversifierMessage
	(*IncomingViewingKeyDiversifierMessage)(nil),     // 58: tronprotocol.IncomingViewingKeyDiversifierMessage
	(*PaymentAddressMessage)(nil),                    // 59: tronprotocol.PaymentAddressMessage
	(*ShieldedAddressInfo)(nil),                      // 60: tronprotocol.ShieldedAddressInfo
	(*NoteParameters)(nil),                           // 61: tronprotocol.NoteParameters
	(*SpendResult)(nil),                              // 62: tronprotocol.SpendResult
	(*TransactionInfoList)(nil),                      // 63: tronprotocol.TransactionInfoList
	(*SpendNoteTRC20)(nil),                           // 64: tronprotocol.SpendNoteTRC20
	(*PrivateShieldedTRC20Parameters)(nil),           // 65: tronprotocol.PrivateShieldedTRC20Parameters
	(*PrivateShieldedTRC20ParametersWithoutAsk)(nil), // 66: tronprotocol.PrivateShieldedTRC20ParametersWithoutAsk
	(*ShieldedTRC20Parameters)(nil),                  // 67: tronprotocol.ShieldedTRC20Parameters
	(*IvkDecryptTRC20Parameters)(nil),                // 68: tronprotocol.IvkDecryptTRC20Parameters
	(*OvkDecryptTRC20Parameters)(nil),                // 69: tronprotocol.OvkDecryptTRC20Parameters
	(*DecryptNotesTRC20)(nil),                        // 70: tronprotocol.DecryptNotesTRC20
	(*NfTRC20Parameters)(nil),                        // 71: tronprotocol.NfTRC20Parameters
	(*NullifierResult)(nil),                          // 72: tronprotocol.NullifierResult
	(*ShieldedTRC20TriggerContractParameters)(nil),   // 73: tronprotocol.ShieldedTRC20TriggerContractParameters
	nil,                                                // 74: tronprotocol.AccountNetMessage.AssetNetUsedEntry
	nil,                                                // 75: tronprotocol.AccountNetMessage.AssetNetLimitEntry
	nil,                                                // 76: tronprotocol.AccountResourceMessage.AssetNetUsedEntry
	nil,                                                // 77: tronprotocol.AccountResourceMessage.AssetNetLimitEntry
	(*TransactionSignWeight_Result)(nil),               // 78: tronprotocol.TransactionSignWeight.Result
	(*TransactionApprovedList_Result)(nil),             // 79: tronprotocol.TransactionApprovedList.Result
	(*DecryptNotes_NoteTx)(nil),                        // 80: tronprotocol.DecryptNotes.NoteTx
	(*DecryptNotesMarked_NoteTx)(nil),                  // 81: tronprotocol.DecryptNotesMarked.NoteTx
	(*DecryptNotesTRC20_NoteTx)(nil),                   // 82: tronprotocol.DecryptNotesTRC20.NoteTx
	(*troncore.Witness)(nil),                           // 83: tronprotocol.Witness
	(*troncore.Proposal)(nil),                          // 84: tronprotocol.Proposal
	(*troncore.Exchange)(nil),                          // 85: tronprotocol.Exchange
	(*troncore.AssetIssueContract)(nil),                // 86: tronprotocol.AssetIssueContract
	(*troncore.Block)(nil),                             // 87: tronprotocol.Block
	(*troncore.Transaction)(nil),                       // 88: tronprotocol.Transaction
	(*troncore.DelegatedResource)(nil),                 // 89: tronprotocol.DelegatedResource
	(*troncore.Account)(nil),                           // 90: tronprotocol.Account
	(*troncore.TransactionInfo_Log)(nil),               // 91: tronprotocol.TransactionInfo.Log
	(*troncore.InternalTransaction)(nil),               // 92: tronprotocol.InternalTransaction
	(*troncore.BlockHeader)(nil),                       // 93: tronprotocol.BlockHeader
	(*troncore.IncrementalMerkleTree)(nil),             // 94: tronprotocol.IncrementalMerkleTree
	(*troncore.Permission)(nil),                        // 95: tronprotocol.Permission
	(*troncore.IncrementalMerkleVoucher)(nil),          // 96: tronprotocol.IncrementalMerkleVoucher
	(*troncore.TransactionInfo)(nil),                   // 97: tronprotocol.TransactionInfo
	(*troncore.SpendDescription)(nil),                  // 98: tronprotocol.SpendDescription
	(*troncore.ReceiveDescription)(nil),                // 99: tronprotocol.ReceiveDescription
	(*troncore.AccountBalanceRequest)(nil),             // 100: tronprotocol.AccountBalanceRequest
	(*troncore.BlockBalanceTrace_BlockIdentifier)(nil), // 101: tronprotocol.BlockBalanceTrace.BlockIdentifier
	(*troncore.TransferContract)(nil),                  // 102: tronprotocol.TransferContract
	(*troncore.AccountUpdateContract)(nil),             // 103: tronprotocol.AccountUpdateContract
	(*troncore.SetAccountIdContract)(nil),              // 104: tronprotocol.SetAccountIdContract
	(*troncore.VoteWitnessContract)(nil),               // 105: tronprotocol.VoteWitnessContract
	(*troncore.UpdateSettingContract)(nil),             // 106: tronprotocol.UpdateSettingContract
	(*troncore.UpdateEnergyLimitContract)(nil),         // 107: tronprotocol.UpdateEnergyLimitContract
	(*troncore.WitnessUpdateContract)(nil),             // 108: tronprotocol.WitnessUpdateContract
	(*troncore.AccountCreateContract)(nil),             // 109: tronprotocol.AccountCreateContract
	(*troncore.WitnessCreateContract)(nil),             // 110: tronprotocol.WitnessCreateContract
	(*troncore.TransferAssetContract)(nil),             // 111: tronprotocol.TransferAssetContract
	(*troncore.ParticipateAssetIssueContract)(nil),     // 112: tronprotocol.ParticipateAssetIssueContract
	(*troncore.FreezeBalanceContract)(nil),             // 113: tronprotocol.FreezeBalanceContract
	(*troncore.UnfreezeBalanceContract)(nil),           // 114: tronprotocol.UnfreezeBalanceContract
	(*troncore.UnfreezeAssetContract)(nil),             // 115: tronprotocol.UnfreezeAssetContract
	(*troncore.WithdrawBalanceContract)(nil),           // 116: tronprotocol.WithdrawBalanceContract
	(*troncore.UpdateAssetContract)(nil),               // 117: tronprotocol.UpdateAssetContract
	(*troncore.ProposalCreateContract)(nil),            // 118: tronprotocol.ProposalCreateContract
	(*troncore.ProposalApproveContract)(nil),           // 119: tronprotocol.ProposalApproveContract
	(*troncore.ProposalDeleteContract)(nil),            // 120: tronprotocol.ProposalDeleteContract
	(*troncore.BuyStorageContract)(nil),                // 121: tronprotocol.BuyStorageContract
	(*troncore.BuyStorageBytesContract)(nil),           // 122: tronprotocol.BuyStorageBytesContract
	(*troncore.SellStorageContract)(nil),               // 123: tronprotocol.SellStorageContract
	(*troncore.ExchangeCreateContract)(nil),            // 124: tronprotocol.ExchangeCreateContract
	(*troncore.ExchangeInjectContract)(nil),            // 125: tronprotocol.ExchangeInjectContract
	(*troncore.ExchangeWithdrawContract)(nil),          // 126: tronprotocol.ExchangeWithdrawContract
	(*troncore.ExchangeTransactionContract)(nil),       // 127: tronprotocol.ExchangeTransactionContract
	(*troncore.MarketSellAssetContract)(nil),           // 128: tronprotocol.MarketSellAssetContract
	(*troncore.MarketCancelOrderContract)(nil),         // 129: tronprotocol.MarketCancelOrderContract
	(*troncore.MarketOrderPair)(nil),                   // 130: tronprotocol.MarketOrderPair
	(*troncore.CreateSmartContract)(nil),               // 131: tronprotocol.CreateSmartContract
	(*troncore.TriggerSmartContract)(nil),              // 132: tronprotocol.TriggerSmartContract
	(*troncore.ClearABIContract)(nil),                  // 133: tronprotocol.ClearABIContract
	(*troncore.TransactionSign)(nil),                   // 134: tronprotocol.TransactionSign
	(*troncore.AccountPermissionUpdateContract)(nil),   // 135: tronprotocol.AccountPermissionUpdateContract
	(*troncore.UpdateBrokerageContract)(nil),           // 136: tronprotocol.UpdateBrokerageContract
	(*troncore.OutputPointInfo)(nil),                   // 137: tronprotocol.OutputPointInfo
	(*troncore.AccountBalanceResponse)(nil),            // 138: tronprotocol.AccountBalanceResponse
	(*troncore.BlockBalanceTrace)(nil),                 // 139: tronprotocol.BlockBalanceTrace
	(*troncore.MarketOrder)(nil),                       // 140: tronprotocol.MarketOrder
	(*troncore.MarketOrderList)(nil),                   // 141: tronprotocol.MarketOrderList
	(*troncore.MarketPriceList)(nil),                   // 142: tronprotocol.MarketPriceList
	(*troncore.MarketOrderPairList)(nil),               // 143: tronprotocol.MarketOrderPairList
	(*troncore.SmartContract)(nil),                     // 144: tronprotocol.SmartContract
	(*troncore.SmartContractDataWrapper)(nil),          // 145: tronprotocol.SmartContractDataWrapper
	(*troncore.DelegatedResourceAccountIndex)(nil),     // 146: tronprotocol.DelegatedResourceAccountIndex
	(*troncore.ChainParameters)(nil),                   // 147: tronprotocol.ChainParameters
	(*troncore.NodeInfo)(nil),                          // 148: tronprotocol.NodeInfo
	(*troncore.IncrementalMerkleVoucherInfo)(nil),      // 149: tronprotocol.IncrementalMerkleVoucherInfo
	(*troncore.DynamicProperties)(nil),                 // 150: tronprotocol.DynamicProperties
	(*troncore.MetricsInfo)(nil),                       // 151: tronprotocol.MetricsInfo
}
var file_tronapi_api_proto_depIdxs = []int32{
	0,   // 0: tronprotocol.Return.code:type_name -> tronprotocol.Return.response_code
	83,  // 1: tronprotocol.WitnessList.witnesses:type_name -> tronprotocol.Witness
	84,  // 2: tronprotocol.ProposalList.proposals:type_name -> tronprotocol.Proposal
	85,  // 3: tronprotocol.ExchangeList.exchanges:type_name -> tronprotocol.Exchange
	86,  // 4: tronprotocol.AssetIssueList.assetIssue:type_name -> tronprotocol.AssetIssueContract
	87,  // 5: tronprotocol.BlockList.block:type_name -> tronprotocol.Block
	88,  // 6: tronprotocol.TransactionList.transaction:type_name -> tronprotocol.Transaction
	89,  // 7: tronprotocol.DelegatedResourceList.delegatedResource:type_name -> tronprotocol.DelegatedResource
	15,  // 8: tronprotocol.NodeList.nodes:type_name -> tronprotocol.Node
	16,  // 9: tronprotocol.Node.address:type_name -> tronprotocol.Address
	90,  // 10: tronprotocol.AccountPaginated.account:type_name -> tronprotocol.Account
	20,  // 11: tronprotocol.TimePaginatedMessage.timeMessage:type_name -> tronprotocol.TimeMessage
	74,  // 12: tronprotocol.AccountNetMessage.assetNetUsed:type_name -> tronprotocol.AccountNetMessage.AssetNetUsedEntry
	75,  // 13: tronprotocol.AccountNetMessage.assetNetLimit:type_name -> tronprotocol.AccountNetMessage.AssetNetLimitEntry
	76,  // 14: tronprotocol.AccountResourceMessage.assetNetUsed:type_name -> tronprotocol.AccountResourceMessage.AssetNetUsedEntry
	77,  // 15: tronprotocol.AccountResourceMessage.assetNetLimit:type_name -> tronprotocol.AccountResourceMessage.AssetNetLimitEntry
	88,  // 16: tronprotocol.EasyTransferResponse.transaction:type_name -> tronprotocol.Transaction
	3,   // 17: tronprotocol.EasyTransferResponse.result:type_name -> tronprotocol.Return
	88,  // 18: tronprotocol.TransactionExtention.transaction:type_name -> tronprotocol.Transaction
	3,   // 19: tronprotocol.TransactionExtention.result:type_name -> tronprotocol.Return
	91,  // 20: tronprotocol.TransactionExtention.logs:type_name -> tronprotocol.TransactionInfo.Log
	92,  // 21: tronprotocol.TransactionExtention.internal_transactions:type_name -> tronprotocol.InternalTransaction
	35,  // 22: tronprotocol.BlockExtention.transactions:type_name -> tronprotocol.TransactionExtention
	93,  // 23: tronprotocol.BlockExtention.block_header:type_name -> tronprotocol.BlockHeader
	36,  // 24: tronprotocol.BlockListExtention.block:type_name -> tronprotocol.BlockExtention
	35,  // 25: tronprotocol.TransactionListExtention.transaction:type_name -> tronprotocol.TransactionExtention
	94,  // 26: tronprotocol.BlockIncrementalMerkleTree.merkleTree:type_name -> tronprotocol.IncrementalMerkleTree
	95,  // 27: tronprotocol.TransactionSignWeight.permission:type_name -> tronprotocol.Permission
	78,  // 28: tronprotocol.TransactionSignWeight.result:type_name -> tronprotocol.TransactionSignWeight.Result
	35,  // 29: tronprotocol.TransactionSignWeight.transaction:type_name -> tronprotocol.TransactionExtention
	79,  // 30: tronprotocol.TransactionApprovedList.result:type_name -> tronprotocol.TransactionApprovedList.Result
	35,  // 31: tronprotocol.TransactionApprovedList.transaction:type_name -> tronprotocol.TransactionExtention
	80,  // 32: tronprotocol.DecryptNotes.noteTxs:type_name -> tronprotocol.DecryptNotes.NoteTx
	81,  // 33: tronprotocol.DecryptNotesMarked.noteTxs:type_name -> tronprotocol.DecryptNotesMarked.NoteTx
	47,  // 34: tronprotocol.SpendNote.note:type_name -> tronprotocol.Note
	96,  // 35: tronprotocol.SpendNote.voucher:type_name -> tronprotocol.IncrementalMerkleVoucher
	47,  // 36: tronprotocol.ReceiveNote.note:type_name -> tronprotocol.Note
	48,  // 37: tronprotocol.PrivateParameters.shielded_spends:type_name -> tronprotocol.SpendNote
	49,  // 38: tronprotocol.PrivateParameters.shielded_receives:type_name -> tronprotocol.ReceiveNote
	48,  // 39: tronprotocol.PrivateParametersWithoutAsk.shielded_spends:type_name -> tronprotocol.SpendNote
	49,  // 40: tronprotocol.PrivateParametersWithoutAsk.shielded_receives:type_name -> tronprotocol.ReceiveNote
	47,  // 41: tronprotocol.NfParameters.note:type_name -> tronprotocol.Note
	96,  // 42: tronprotocol.NfParameters.voucher:type_name -> tronprotocol.IncrementalMerkleVoucher
	56,  // 43: tronprotocol.IncomingViewingKeyDiversifierMessage.ivk:type_name -> tronprotocol.IncomingViewingKeyMessage
	57,  // 44: tronprotocol.IncomingViewingKeyDiversifierMessage.d:type_name -> tronprotocol.DiversifierMessage
	57,  // 45: tronprotocol.PaymentAddressMessage.d:type_name -> tronprotocol.DiversifierMessage
	47,  // 46: tronprotocol.NoteParameters.note:type_name -> tronprotocol.Note
	97,  // 47: tronprotocol.TransactionInfoList.transactionInfo:type_name -> tronprotocol.TransactionInfo
	47,  // 48: tronprotocol.SpendNoteTRC20.note:type_name -> tronprotocol.Note
	64,  // 49: tronprotocol.PrivateShieldedTRC20Parameters.shielded_spends:type_name -> tronprotocol.SpendNoteTRC20
	49,  // 50: tronprotocol.PrivateShieldedTRC20Parameters.shielded_receives:type_name -> tronprotocol.ReceiveNote
	64,  // 51: tronprotocol.PrivateShieldedTRC20ParametersWithoutAsk.shielded_spends:type_name -> tronprotocol.SpendNoteTRC20
	49,  // 52: tronprotocol.PrivateShieldedTRC20ParametersWithoutAsk.shielded_receives:type_name -> tronprotocol.ReceiveNote
	98,  // 53: tronprotocol.ShieldedTRC20Parameters.spend_description:type_name -> tronprotocol.SpendDescription
	99,  // 54: tronprotocol.ShieldedTRC20Parameters.receive_description:type_name -> tronprotocol.ReceiveDescription
	82,  // 55: tronprotocol.DecryptNotesTRC20.noteTxs:type_name -> tronprotocol.DecryptNotesTRC20.NoteTx
	47,  // 56: tronprotocol.NfTRC20Parameters.note:type_name -> tronprotocol.Note
	67,  // 57: tronprotocol.ShieldedTRC20TriggerContractParameters.shielded_TRC20_Parameters:type_name -> tronprotocol.ShieldedTRC20Parameters
	19,  // 58: tronprotocol.ShieldedTRC20TriggerContractParameters.spend_authority_signature:type_name -> tronprotocol.BytesMessage
	1,   // 59: tronprotocol.TransactionSignWeight.Result.code:type_name -> tronprotocol.TransactionSignWeight.Result.response_code
	2,   // 60: tronprotocol.TransactionApprovedList.Result.code:type_name -> tronprotocol.TransactionApprovedList.Result.response_code
	47,  // 61: tronprotocol.DecryptNotes.NoteTx.note:type_name -> tronprotocol.Note
	47,  // 62: tronprotocol.DecryptNotesMarked.NoteTx.note:type_name -> tronprotocol.Note
	47,  // 63: tronprotocol.DecryptNotesTRC20.NoteTx.note:type_name -> tronprotocol.Note
	90,  // 64: tronprotocol.Wallet.GetAccount:input_type -> tronprotocol.Account
	90,  // 65: tronprotocol.Wallet.GetAccountById:input_type -> tronprotocol.Account
	100, // 66: tronprotocol.Wallet.GetAccountBalance:input_type -> tronprotocol.AccountBalanceRequest
	101, // 67: tronprotocol.Wallet.GetBlockBalanceTrace:input_type -> tronprotocol.BlockBalanceTrace.BlockIdentifier
	102, // 68: tronprotocol.Wallet.CreateTransaction:input_type -> tronprotocol.TransferContract
	102, // 69: tronprotocol.Wallet.CreateTransaction2:input_type -> tronprotocol.TransferContract
	88,  // 70: tronprotocol.Wallet.BroadcastTransaction:input_type -> tronprotocol.Transaction
	103, // 71: tronprotocol.Wallet.UpdateAccount:input_type -> tronprotocol.AccountUpdateContract
	104, // 72: tronprotocol.Wallet.SetAccountId:input_type -> tronprotocol.SetAccountIdContract
	103, // 73: tronprotocol.Wallet.UpdateAccount2:input_type -> tronprotocol.AccountUpdateContract
	105, // 74: tronprotocol.Wallet.VoteWitnessAccount:input_type -> tronprotocol.VoteWitnessContract
	106, // 75: tronprotocol.Wallet.UpdateSetting:input_type -> tronprotocol.UpdateSettingContract
	107, // 76: tronprotocol.Wallet.UpdateEnergyLimit:input_type -> tronprotocol.UpdateEnergyLimitContract
	105, // 77: tronprotocol.Wallet.VoteWitnessAccount2:input_type -> tronprotocol.VoteWitnessContract
	86,  // 78: tronprotocol.Wallet.CreateAssetIssue:input_type -> tronprotocol.AssetIssueContract
	86,  // 79: tronprotocol.Wallet.CreateAssetIssue2:input_type -> tronprotocol.AssetIssueContract
	108, // 80: tronprotocol.Wallet.UpdateWitness:input_type -> tronprotocol.WitnessUpdateContract
	108, // 81: tronprotocol.Wallet.UpdateWitness2:input_type -> tronprotocol.WitnessUpdateContract
	109, // 82: tronprotocol.Wallet.CreateAccount:input_type -> tronprotocol.AccountCreateContract
	109, // 83: tronprotocol.Wallet.CreateAccount2:input_type -> tronprotocol.AccountCreateContract
	110, // 84: tronprotocol.Wallet.CreateWitness:input_type -> tronprotocol.WitnessCreateContract
	110, // 85: tronprotocol.Wallet.CreateWitness2:input_type -> tronprotocol.WitnessCreateContract
	111, // 86: tronprotocol.Wallet.TransferAsset:input_type -> tronprotocol.TransferAssetContract
	111, // 87: tronprotocol.Wallet.TransferAsset2:input_type -> tronprotocol.TransferAssetContract
	112, // 88: tronprotocol.Wallet.ParticipateAssetIssue:input_type -> tronprotocol.ParticipateAssetIssueContract
	112, // 89: tronprotocol.Wallet.ParticipateAssetIssue2:input_type -> tronprotocol.ParticipateAssetIssueContract
	113, // 90: tronprotocol.Wallet.FreezeBalance:input_type -> tronprotocol.FreezeBalanceContract
	113, // 91: tronprotocol.Wallet.FreezeBalance2:input_type -> tronprotocol.FreezeBalanceContract
	114, // 92: tronprotocol.Wallet.UnfreezeBalance:input_type -> tronprotocol.UnfreezeBalanceContract
	114, // 93: tronprotocol.Wallet.UnfreezeBalance2:input_type -> tronprotocol.UnfreezeBalanceContract
	115, // 94: tronprotocol.Wallet.UnfreezeAsset:input_type -> tronprotocol.UnfreezeAssetContract
	115, // 95: tronprotocol.Wallet.UnfreezeAsset2:input_type -> tronprotocol.UnfreezeAssetContract
	116, // 96: tronprotocol.Wallet.WithdrawBalance:input_type -> tronprotocol.WithdrawBalanceContract
	116, // 97: tronprotocol.Wallet.WithdrawBalance2:input_type -> tronprotocol.WithdrawBalanceContract
	117, // 98: tronprotocol.Wallet.UpdateAsset:input_type -> tronprotocol.UpdateAssetContract
	117, // 99: tronprotocol.Wallet.UpdateAsset2:input_type -> tronprotocol.UpdateAssetContract
	118, // 100: tronprotocol.Wallet.ProposalCreate:input_type -> tronprotocol.ProposalCreateContract
	119, // 101: tronprotocol.Wallet.ProposalApprove:input_type -> tronprotocol.ProposalApproveContract
	120, // 102: tronprotocol.Wallet.ProposalDelete:input_type -> tronprotocol.ProposalDeleteContract
	121, // 103: tronprotocol.Wallet.BuyStorage:input_type -> tronprotocol.BuyStorageContract
	122, // 104: tronprotocol.Wallet.BuyStorageBytes:input_type -> tronprotocol.BuyStorageBytesContract
	123, // 105: tronprotocol.Wallet.SellStorage:input_type -> tronprotocol.SellStorageContract
	124, // 106: tronprotocol.Wallet.ExchangeCreate:input_type -> tronprotocol.ExchangeCreateContract
	125, // 107: tronprotocol.Wallet.ExchangeInject:input_type -> tronprotocol.ExchangeInjectContract
	126, // 108: tronprotocol.Wallet.ExchangeWithdraw:input_type -> tronprotocol.ExchangeWithdrawContract
	127, // 109: tronprotocol.Wallet.ExchangeTransaction:input_type -> tronprotocol.ExchangeTransactionContract
	128, // 110: tronprotocol.Wallet.MarketSellAsset:input_type -> tronprotocol.MarketSellAssetContract
	129, // 111: tronprotocol.Wallet.MarketCancelOrder:input_type -> tronprotocol.MarketCancelOrderContract
	19,  // 112: tronprotocol.Wallet.GetMarketOrderById:input_type -> tronprotocol.BytesMessage
	19,  // 113: tronprotocol.Wallet.GetMarketOrderByAccount:input_type -> tronprotocol.BytesMessage
	130, // 114: tronprotocol.Wallet.GetMarketPriceByPair:input_type -> tronprotocol.MarketOrderPair
	130, // 115: tronprotocol.Wallet.GetMarketOrderListByPair:input_type -> tronprotocol.MarketOrderPair
	17,  // 116: tronprotocol.Wallet.GetMarketPairList:input_type -> tronprotocol.EmptyMessage
	17,  // 117: tronprotocol.Wallet.ListNodes:input_type -> tronprotocol.EmptyMessage
	90,  // 118: tronprotocol.Wallet.GetAssetIssueByAccount:input_type -> tronprotocol.Account
	90,  // 119: tronprotocol.Wallet.GetAccountNet:input_type -> tronprotocol.Account
	90,  // 120: tronprotocol.Wallet.GetAccountResource:input_type -> tronprotocol.Account
	19,  // 121: tronprotocol.Wallet.GetAssetIssueByName:input_type -> tronprotocol.BytesMessage
	19,  // 122: tronprotocol.Wallet.GetAssetIssueListByName:input_type -> tronprotocol.BytesMessage
	19,  // 123: tronprotocol.Wallet.GetAssetIssueById:input_type -> tronprotocol.BytesMessage
	17,  // 124: tronprotocol.Wallet.GetNowBlock:input_type -> tronprotocol.EmptyMessage
	17,  // 125: tronprotocol.Wallet.GetNowBlock2:input_type -> tronprotocol.EmptyMessage
	18,  // 126: tronprotocol.Wallet.GetBlockByNum:input_type -> tronprotocol.NumberMessage
	18,  // 127: tronprotocol.Wallet.GetBlockByNum2:input_type -> tronprotocol.NumberMessage
	18,  // 128: tronprotocol.Wallet.GetTransactionCountByBlockNum:input_type -> tronprotocol.NumberMessage
	19,  // 129: tronprotocol.Wallet.GetBlockById:input_type -> tronprotocol.BytesMessage
	22,  // 130: tronprotocol.Wallet.GetBlockByLimitNext:input_type -> tronprotocol.BlockLimit
	22,  // 131: tronprotocol.Wallet.GetBlockByLimitNext2:input_type -> tronprotocol.BlockLimit
	18,  // 132: tronprotocol.Wallet.GetBlockByLatestNum:input_type -> tronprotocol.NumberMessage
	18,  // 133: tronprotocol.Wallet.GetBlockByLatestNum2:input_type -> tronprotocol.NumberMessage
	19,  // 134: tronprotocol.Wallet.GetTransactionById:input_type -> tronprotocol.BytesMessage
	131, // 135: tronprotocol.Wallet.DeployContract:input_type -> tronprotocol.CreateSmartContract
	19,  // 136: tronprotocol.Wallet.GetContract:input_type -> tronprotocol.BytesMessage
	19,  // 137: tronprotocol.Wallet.GetContractInfo:input_type -> tronprotocol.BytesMessage
	132, // 138: tronprotocol.Wallet.TriggerContract:input_type -> tronprotocol.TriggerSmartContract
	132, // 139: tronprotocol.Wallet.TriggerConstantContract:input_type -> tronprotocol.TriggerSmartContract
	133, // 140: tronprotocol.Wallet.ClearContractABI:input_type -> tronprotocol.ClearABIContract
	17,  // 141: tronprotocol.Wallet.ListWitnesses:input_type -> tronprotocol.EmptyMessage
	12,  // 142: tronprotocol.Wallet.GetDelegatedResource:input_type -> tronprotocol.DelegatedResourceMessage
	19,  // 143: tronprotocol.Wallet.GetDelegatedResourceAccountIndex:input_type -> tronprotocol.BytesMessage
	17,  // 144: tronprotocol.Wallet.ListProposals:input_type -> tronprotocol.EmptyMessage
	28,  // 145: tronprotocol.Wallet.GetPaginatedProposalList:input_type -> tronprotocol.PaginatedMessage
	19,  // 146: tronprotocol.Wallet.GetProposalById:input_type -> tronprotocol.BytesMessage
	17,  // 147: tronprotocol.Wallet.ListExchanges:input_type -> tronprotocol.EmptyMessage
	28,  // 148: tronprotocol.Wallet.GetPaginatedExchangeList:input_type -> tronprotocol.PaginatedMessage
	19,  // 149: tronprotocol.Wallet.GetExchangeById:input_type -> tronprotocol.BytesMessage
	17,  // 150: tronprotocol.Wallet.GetChainParameters:input_type -> tronprotocol.EmptyMessage
	17,  // 151: tronprotocol.Wallet.GetAssetIssueList:input_type -> tronprotocol.EmptyMessage
	28,  // 152: tronprotocol.Wallet.GetPaginatedAssetIssueList:input_type -> tronprotocol.PaginatedMessage
	17,  // 153: tronprotocol.Wallet.TotalTransaction:input_type -> tronprotocol.EmptyMessage
	17,  // 154: tronprotocol.Wallet.GetNextMaintenanceTime:input_type -> tronprotocol.EmptyMessage
	134, // 155: tronprotocol.Wallet.GetTransactionSign:input_type -> tronprotocol.TransactionSign
	134, // 156: tronprotocol.Wallet.GetTransactionSign2:input_type -> tronprotocol.TransactionSign
	19,  // 157: tronprotocol.Wallet.CreateAddress:input_type -> tronprotocol.BytesMessage
	30,  // 158: tronprotocol.Wallet.EasyTransferAsset:input_type -> tronprotocol.EasyTransferAssetMessage
	32,  // 159: tronprotocol.Wallet.EasyTransferAssetByPrivate:input_type -> tronprotocol.EasyTransferAssetByPrivateMessage
	29,  // 160: tronprotocol.Wallet.EasyTransfer:input_type -> tronprotocol.EasyTransferMessage
	31,  // 161: tronprotocol.Wallet.EasyTransferByPrivate:input_type -> tronprotocol.EasyTransferByPrivateMessage
	17,  // 162: tronprotocol.Wallet.GenerateAddress:input_type -> tronprotocol.EmptyMessage
	19,  // 163: tronprotocol.Wallet.GetTransactionInfoById:input_type -> tronprotocol.BytesMessage
	135, // 164: tronprotocol.Wallet.AccountPermissionUpdate:input_type -> tronprotocol.AccountPermissionUpdateContract
	134, // 165: tronprotocol.Wallet.AddSign:input_type -> tronprotocol.TransactionSign
	88,  // 166: tronprotocol.Wallet.GetTransactionSignWeight:input_type -> tronprotocol.Transaction
	88,  // 167: tronprotocol.Wallet.GetTransactionApprovedList:input_type -> tronprotocol.Transaction
	17,  // 168: tronprotocol.Wallet.GetNodeInfo:input_type -> tronprotocol.EmptyMessage
	19,  // 169: tronprotocol.Wallet.GetRewardInfo:input_type -> tronprotocol.BytesMessage
	19,  // 170: tronprotocol.Wallet.GetBrokerageInfo:input_type -> tronprotocol.BytesMessage
	136, // 171: tronprotocol.Wallet.UpdateBrokerage:input_type -> tronprotocol.UpdateBrokerageContract
	50,  // 172: tronprotocol.Wallet.CreateShieldedTransaction:input_type -> tronprotocol.PrivateParameters
	137, // 173: tronprotocol.Wallet.GetMerkleTreeVoucherInfo:input_type -> tronprotocol.OutputPointInfo
	42,  // 174: tronprotocol.Wallet.ScanNoteByIvk:input_type -> tronprotocol.IvkDecryptParameters
	43,  // 175: tronprotocol.Wallet.ScanAndMarkNoteByIvk:input_type -> tronprotocol.IvkDecryptAndMarkParameters
	44,  // 176: tronprotocol.Wallet.ScanNoteByOvk:input_type -> tronprotocol.OvkDecryptParameters
	17,  // 177: tronprotocol.Wallet.GetSpendingKey:input_type -> tronprotocol.EmptyMessage
	19,  // 178: tronprotocol.Wallet.GetExpandedSpendingKey:input_type -> tronprotocol.BytesMessage
	19,  // 179: tronprotocol.Wallet.GetAkFromAsk:input_type -> tronprotocol.BytesMessage
	19,  // 180: tronprotocol.Wallet.GetNkFromNsk:input_type -> tronprotocol.BytesMessage
	55,  // 181: tronprotocol.Wallet.GetIncomingViewingKey:input_type -> tronprotocol.ViewingKeyMessage
	17,  // 182: tronprotocol.Wallet.GetDiversifier:input_type -> tronprotocol.EmptyMessage
	17,  // 183: tronprotocol.Wallet.GetNewShieldedAddress:input_type -> tronprotocol.EmptyMessage
	58,  // 184: tronprotocol.Wallet.GetZenPaymentAddress:input_type -> tronprotocol.IncomingViewingKeyDiversifierMessage
	17,  // 185: tronprotocol.Wallet.GetRcm:input_type -> tronprotocol.EmptyMessage
	61,  // 186: tronprotocol.Wallet.IsSpend:input_type -> tronprotocol.NoteParameters
	51,  // 187: tronprotocol.Wallet.CreateShieldedTransactionWithoutSpendAuthSig:input_type -> tronprotocol.PrivateParametersWithoutAsk
	88,  // 188: tronprotocol.Wallet.GetShieldTransactionHash:input_type -> tronprotocol.Transaction
	52,  // 189: tronprotocol.Wallet.CreateSpendAuthSig:input_type -> tronprotocol.SpendAuthSigParameters
	53,  // 190: tronprotocol.Wallet.CreateShieldNullifier:input_type -> tronprotocol.NfParameters
	65,  // 191: tronprotocol.Wallet.CreateShieldedContractParameters:input_type -> tronprotocol.PrivateShieldedTRC20Parameters
	66,  // 192: tronprotocol.Wallet.CreateShieldedContractParametersWithoutAsk:input_type -> tronprotocol.PrivateShieldedTRC20ParametersWithoutAsk
	68,  // 193: tronprotocol.Wallet.ScanShieldedTRC20NotesByIvk:input_type -> tronprotocol.IvkDecryptTRC20Parameters
	69,  // 194: tronprotocol.Wallet.ScanShieldedTRC20NotesByOvk:input_type -> tronprotocol.OvkDecryptTRC20Parameters
	71,  // 195: tronprotocol.Wallet.IsShieldedTRC20ContractNoteSpent:input_type -> tronprotocol.NfTRC20Parameters
	73,  // 196: tronprotocol.Wallet.GetTriggerInputForShieldedTRC20Contract:input_type -> tronprotocol.ShieldedTRC20TriggerContractParameters
	88,  // 197: tronprotocol.Wallet.CreateCommonTransaction:input_type -> tronprotocol.Transaction
	18,  // 198: tronprotocol.Wallet.GetTransactionInfoByBlockNum:input_type -> tronprotocol.NumberMessage
	17,  // 199: tronprotocol.Wallet.GetBurnTrx:input_type -> tronprotocol.EmptyMessage
	19,  // 200: tronprotocol.Wallet.GetTransactionFromPending:input_type -> tronprotocol.BytesMessage
	17,  // 201: tronprotocol.Wallet.GetTransactionListFromPending:input_type -> tronprotocol.EmptyMessage
	17,  // 202: tronprotocol.Wallet.GetPendingSize:input_type -> tronprotocol.EmptyMessage
	21,  // 203: tronprotocol.Wallet.GetBlock:input_type -> tronprotocol.BlockReq
	90,  // 204: tronprotocol.WalletSolidity.GetAccount:input_type -> tronprotocol.Account
	90,  // 205: tronprotocol.WalletSolidity.GetAccountById:input_type -> tronprotocol.Account
	17,  // 206: tronprotocol.WalletSolidity.ListWitnesses:input_type -> tronprotocol.EmptyMessage
	17,  // 207: tronprotocol.WalletSolidity.GetAssetIssueList:input_type -> tronprotocol.EmptyMessage
	28,  // 208: tronprotocol.WalletSolidity.GetPaginatedAssetIssueList:input_type -> tronprotocol.PaginatedMessage
	19,  // 209: tronprotocol.WalletSolidity.GetAssetIssueByName:input_type -> tronprotocol.BytesMessage
	19,  // 210: tronprotocol.WalletSolidity.GetAssetIssueListByName:input_type -> tronprotocol.BytesMessage
	19,  // 211: tronprotocol.WalletSolidity.GetAssetIssueById:input_type -> tronprotocol.BytesMessage
	17,  // 212: tronprotocol.WalletSolidity.GetNowBlock:input_type -> tronprotocol.EmptyMessage
	17,  // 213: tronprotocol.WalletSolidity.GetNowBlock2:input_type -> tronprotocol.EmptyMessage
	18,  // 214: tronprotocol.WalletSolidity.GetBlockByNum:input_type -> tronprotocol.NumberMessage
	18,  // 215: tronprotocol.WalletSolidity.GetBlockByNum2:input_type -> tronprotocol.NumberMessage
	18,  // 216: tronprotocol.WalletSolidity.GetTransactionCountByBlockNum:input_type -> tronprotocol.NumberMessage
	12,  // 217: tronprotocol.WalletSolidity.GetDelegatedResource:input_type -> tronprotocol.DelegatedResourceMessage
	19,  // 218: tronprotocol.WalletSolidity.GetDelegatedResourceAccountIndex:input_type -> tronprotocol.BytesMessage
	19,  // 219: tronprotocol.WalletSolidity.GetExchangeById:input_type -> tronprotocol.BytesMessage
	17,  // 220: tronprotocol.WalletSolidity.ListExchanges:input_type -> tronprotocol.EmptyMessage
	19,  // 221: tronprotocol.WalletSolidity.GetTransactionById:input_type -> tronprotocol.BytesMessage
	19,  // 222: tronprotocol.WalletSolidity.GetTransactionInfoById:input_type -> tronprotocol.BytesMessage
	17,  // 223: tronprotocol.WalletSolidity.GenerateAddress:input_type -> tronprotocol.EmptyMessage
	137, // 224: tronprotocol.WalletSolidity.GetMerkleTreeVoucherInfo:input_type -> tronprotocol.OutputPointInfo
	42,  // 225: tronprotocol.WalletSolidity.ScanNoteByIvk:input_type -> tronprotocol.IvkDecryptParameters
	43,  // 226: tronprotocol.WalletSolidity.ScanAndMarkNoteByIvk:input_type -> tronprotocol.IvkDecryptAndMarkParameters
	44,  // 227: tronprotocol.WalletSolidity.ScanNoteByOvk:input_type -> tronprotocol.OvkDecryptParameters
	61,  // 228: tronprotocol.WalletSolidity.IsSpend:input_type -> tronprotocol.NoteParameters
	68,  // 229: tronprotocol.WalletSolidity.ScanShieldedTRC20NotesByIvk:input_type -> tronprotocol.IvkDecryptTRC20Parameters
	69,  // 230: tronprotocol.WalletSolidity.ScanShieldedTRC20NotesByOvk:input_type -> tronprotocol.OvkDecryptTRC20Parameters
	71,  // 231: tronprotocol.WalletSolidity.IsShieldedTRC20ContractNoteSpent:input_type -> tronprotocol.NfTRC20Parameters
	19,  // 232: tronprotocol.WalletSolidity.GetRewardInfo:input_type -> tronprotocol.BytesMessage
	19,  // 233: tronprotocol.WalletSolidity.GetBrokerageInfo:input_type -> tronprotocol.BytesMessage
	132, // 234: tronprotocol.WalletSolidity.TriggerConstantContract:input_type -> tronprotocol.TriggerSmartContract
	18,  // 235: tronprotocol.WalletSolidity.GetTransactionInfoByBlockNum:input_type -> tronprotocol.NumberMessage
	19,  // 236: tronprotocol.WalletSolidity.GetMarketOrderById:input_type -> tronprotocol.BytesMessage
	19,  // 237: tronprotocol.WalletSolidity.GetMarketOrderByAccount:input_type -> tronprotocol.BytesMessage
	130, // 238: tronprotocol.WalletSolidity.GetMarketPriceByPair:input_type -> tronprotocol.MarketOrderPair
	130, // 239: tronprotocol.WalletSolidity.GetMarketOrderListByPair:input_type -> tronprotocol.MarketOrderPair
	17,  // 240: tronprotocol.WalletSolidity.GetMarketPairList:input_type -> tronprotocol.EmptyMessage
	17,  // 241: tronprotocol.WalletSolidity.GetBurnTrx:input_type -> tronprotocol.EmptyMessage
	21,  // 242: tronprotocol.WalletSolidity.GetBlock:input_type -> tronprotocol.BlockReq
	24,  // 243: tronprotocol.WalletExtension.GetTransactionsFromThis:input_type -> tronprotocol.AccountPaginated
	24,  // 244: tronprotocol.WalletExtension.GetTransactionsFromThis2:input_type -> tronprotocol.AccountPaginated
	24,  // 245: tronprotocol.WalletExtension.GetTransactionsToThis:input_type -> tronprotocol.AccountPaginated
	24,  // 246: tronprotocol.WalletExtension.GetTransactionsToThis2:input_type -> tronprotocol.AccountPaginated
	17,  // 247: tronprotocol.Database.getBlockReference:input_type -> tronprotocol.EmptyMessage
	17,  // 248: tronprotocol.Database.GetDynamicProperties:input_type -> tronprotocol.EmptyMessage
	17,  // 249: tronprotocol.Database.GetNowBlock:input_type -> tronprotocol.EmptyMessage
	18,  // 250: tronprotocol.Database.GetBlockByNum:input_type -> tronprotocol.NumberMessage
	17,  // 251: tronprotocol.Monitor.GetStatsInfo:input_type -> tronprotocol.EmptyMessage
	90,  // 252: tronprotocol.Wallet.GetAccount:output_type -> tronprotocol.Account
	90,  // 253: tronprotocol.Wallet.GetAccountById:output_type -> tronprotocol.Account
	138, // 254: tronprotocol.Wallet.GetAccountBalance:output_type -> tronprotocol.AccountBalanceResponse
	139, // 255: tronprotocol.Wallet.GetBlockBalanceTrace:output_type -> tronprotocol.BlockBalanceTrace
	88,  // 256: tronprotocol.Wallet.CreateTransaction:output_type -> tronprotocol.Transaction
	35,  // 257: tronprotocol.Wallet.CreateTransaction2:output_type -> tronprotocol.TransactionExtention
	3,   // 258: tronprotocol.Wallet.BroadcastTransaction:output_type -> tronprotocol.Return
	88,  // 259: tronprotocol.Wallet.UpdateAccount:output_type -> tronprotocol.Transaction
	88,  // 260: tronprotocol.Wallet.SetAccountId:output_type -> tronprotocol.Transaction
	35,  // 261: tronprotocol.Wallet.UpdateAccount2:output_type -> tronprotocol.TransactionExtention
	88,  // 262: tronprotocol.Wallet.VoteWitnessAccount:output_type -> tronprotocol.Transaction
	35,  // 263: tronprotocol.Wallet.UpdateSetting:output_type -> tronprotocol.TransactionExtention
	35,  // 264: tronprotocol.Wallet.UpdateEnergyLimit:output_type -> tronprotocol.TransactionExtention
	35,  // 265: tronprotocol.Wallet.VoteWitnessAccount2:output_type -> tronprotocol.TransactionExtention
	88,  // 266: tronprotocol.Wallet.CreateAssetIssue:output_type -> tronprotocol.Transaction
	35,  // 267: tronprotocol.Wallet.CreateAssetIssue2:output_type -> tronprotocol.TransactionExtention
	88,  // 268: tronprotocol.Wallet.UpdateWitness:output_type -> tronprotocol.Transaction
	35,  // 269: tronprotocol.Wallet.UpdateWitness2:output_type -> tronprotocol.TransactionExtention
	88,  // 270: tronprotocol.Wallet.CreateAccount:output_type -> tronprotocol.Transaction
	35,  // 271: tronprotocol.Wallet.CreateAccount2:output_type -> tronprotocol.TransactionExtention
	88,  // 272: tronprotocol.Wallet.CreateWitness:output_type -> tronprotocol.Transaction
	35,  // 273: tronprotocol.Wallet.CreateWitness2:output_type -> tronprotocol.TransactionExtention
	88,  // 274: tronprotocol.Wallet.TransferAsset:output_type -> tronprotocol.Transaction
	35,  // 275: tronprotocol.Wallet.TransferAsset2:output_type -> tronprotocol.TransactionExtention
	88,  // 276: tronprotocol.Wallet.ParticipateAssetIssue:output_type -> tronprotocol.Transaction
	35,  // 277: tronprotocol.Wallet.ParticipateAssetIssue2:output_type -> tronprotocol.TransactionExtention
	88,  // 278: tronprotocol.Wallet.FreezeBalance:output_type -> tronprotocol.Transaction
	35,  // 279: tronprotocol.Wallet.FreezeBalance2:output_type -> tronprotocol.TransactionExtention
	88,  // 280: tronprotocol.Wallet.UnfreezeBalance:output_type -> tronprotocol.Transaction
	35,  // 281: tronprotocol.Wallet.UnfreezeBalance2:output_type -> tronprotocol.TransactionExtention
	88,  // 282: tronprotocol.Wallet.UnfreezeAsset:output_type -> tronprotocol.Transaction
	35,  // 283: tronprotocol.Wallet.UnfreezeAsset2:output_type -> tronprotocol.TransactionExtention
	88,  // 284: tronprotocol.Wallet.WithdrawBalance:output_type -> tronprotocol.Transaction
	35,  // 285: tronprotocol.Wallet.WithdrawBalance2:output_type -> tronprotocol.TransactionExtention
	88,  // 286: tronprotocol.Wallet.UpdateAsset:output_type -> tronprotocol.Transaction
	35,  // 287: tronprotocol.Wallet.UpdateAsset2:output_type -> tronprotocol.TransactionExtention
	35,  // 288: tronprotocol.Wallet.ProposalCreate:output_type -> tronprotocol.TransactionExtention
	35,  // 289: tronprotocol.Wallet.ProposalApprove:output_type -> tronprotocol.TransactionExtention
	35,  // 290: tronprotocol.Wallet.ProposalDelete:output_type -> tronprotocol.TransactionExtention
	35,  // 291: tronprotocol.Wallet.BuyStorage:output_type -> tronprotocol.TransactionExtention
	35,  // 292: tronprotocol.Wallet.BuyStorageBytes:output_type -> tronprotocol.TransactionExtention
	35,  // 293: tronprotocol.Wallet.SellStorage:output_type -> tronprotocol.TransactionExtention
	35,  // 294: tronprotocol.Wallet.ExchangeCreate:output_type -> tronprotocol.TransactionExtention
	35,  // 295: tronprotocol.Wallet.ExchangeInject:output_type -> tronprotocol.TransactionExtention
	35,  // 296: tronprotocol.Wallet.ExchangeWithdraw:output_type -> tronprotocol.TransactionExtention
	35,  // 297: tronprotocol.Wallet.ExchangeTransaction:output_type -> tronprotocol.TransactionExtention
	35,  // 298: tronprotocol.Wallet.MarketSellAsset:output_type -> tronprotocol.TransactionExtention
	35,  // 299: tronprotocol.Wallet.MarketCancelOrder:output_type -> tronprotocol.TransactionExtention
	140, // 300: tronprotocol.Wallet.GetMarketOrderById:output_type -> tronprotocol.MarketOrder
	141, // 301: tronprotocol.Wallet.GetMarketOrderByAccount:output_type -> tronprotocol.MarketOrderList
	142, // 302: tronprotocol.Wallet.GetMarketPriceByPair:output_type -> tronprotocol.MarketPriceList
	141, // 303: tronprotocol.Wallet.GetMarketOrderListByPair:output_type -> tronprotocol.MarketOrderList
	143, // 304: tronprotocol.Wallet.GetMarketPairList:output_type -> tronprotocol.MarketOrderPairList
	14,  // 305: tronprotocol.Wallet.ListNodes:output_type -> tronprotocol.NodeList
	8,   // 306: tronprotocol.Wallet.GetAssetIssueByAccount:output_type -> tronprotocol.AssetIssueList
	26,  // 307: tronprotocol.Wallet.GetAccountNet:output_type -> tronprotocol.AccountNetMessage
	27,  // 308: tronprotocol.Wallet.GetAccountResource:output_type -> tronprotocol.AccountResourceMessage
	86,  // 309: tronprotocol.Wallet.GetAssetIssueByName:output_type -> tronprotocol.AssetIssueContract
	8,   // 310: tronprotocol.Wallet.GetAssetIssueListByName:output_type -> tronprotocol.AssetIssueList
	86,  // 311: tronprotocol.Wallet.GetAssetIssueById:output_type -> tronprotocol.AssetIssueContract
	87,  // 312: tronprotocol.Wallet.GetNowBlock:output_type -> tronprotocol.Block
	36,  // 313: tronprotocol.Wallet.GetNowBlock2:output_type -> tronprotocol.BlockExtention
	87,  // 314: tronprotocol.Wallet.GetBlockByNum:output_type -> tronprotocol.Block
	36,  // 315: tronprotocol.Wallet.GetBlockByNum2:output_type -> tronprotocol.BlockExtention
	18,  // 316: tronprotocol.Wallet.GetTransactionCountByBlockNum:output_type -> tronprotocol.NumberMessage
	87,  // 317: tronprotocol.Wallet.GetBlockById:output_type -> tronprotocol.Block
	9,   // 318: tronprotocol.Wallet.GetBlockByLimitNext:output_type -> tronprotocol.BlockList
	37,  // 319: tronprotocol.Wallet.GetBlockByLimitNext2:output_type -> tronprotocol.BlockListExtention
	9,   // 320: tronprotocol.Wallet.GetBlockByLatestNum:output_type -> tronprotocol.BlockList
	37,  // 321: tronprotocol.Wallet.GetBlockByLatestNum2:output_type -> tronprotocol.BlockListExtention
	88,  // 322: tronprotocol.Wallet.GetTransactionById:output_type -> tronprotocol.Transaction
	35,  // 323: tronprotocol.Wallet.DeployContract:output_type -> tronprotocol.TransactionExtention
	144, // 324: tronprotocol.Wallet.GetContract:output_type -> tronprotocol.SmartContract
	145, // 325: tronprotocol.Wallet.GetContractInfo:output_type -> tronprotocol.SmartContractDataWrapper
	35,  // 326: tronprotocol.Wallet.TriggerContract:output_type -> tronprotocol.TransactionExtention
	35,  // 327: tronprotocol.Wallet.TriggerConstantContract:output_type -> tronprotocol.TransactionExtention
	35,  // 328: tronprotocol.Wallet.ClearContractABI:output_type -> tronprotocol.TransactionExtention
	5,   // 329: tronprotocol.Wallet.ListWitnesses:output_type -> tronprotocol.WitnessList
	13,  // 330: tronprotocol.Wallet.GetDelegatedResource:output_type -> tronprotocol.DelegatedResourceList
	146, // 331: tronprotocol.Wallet.GetDelegatedResourceAccountIndex:output_type -> tronprotocol.DelegatedResourceAccountIndex
	6,   // 332: tronprotocol.Wallet.ListProposals:output_type -> tronprotocol.ProposalList
	6,   // 333: tronprotocol.Wallet.GetPaginatedProposalList:output_type -> tronprotocol.ProposalList
	84,  // 334: tronprotocol.Wallet.GetProposalById:output_type -> tronprotocol.Proposal
	7,   // 335: tronprotocol.Wallet.ListExchanges:output_type -> tronprotocol.ExchangeList
	7,   // 336: tronprotocol.Wallet.GetPaginatedExchangeList:output_type -> tronprotocol.ExchangeList
	85,  // 337: tronprotocol.Wallet.GetExchangeById:output_type -> tronprotocol.Exchange
	147, // 338: tronprotocol.Wallet.GetChainParameters:output_type -> tronprotocol.ChainParameters
	8,   // 339: tronprotocol.Wallet.GetAssetIssueList:output_type -> tronprotocol.AssetIssueList
	8,   // 340: tronprotocol.Wallet.GetPaginatedAssetIssueList:output_type -> tronprotocol.AssetIssueList
	18,  // 341: tronprotocol.Wallet.TotalTransaction:output_type -> tronprotocol.NumberMessage
	18,  // 342: tronprotocol.Wallet.GetNextMaintenanceTime:output_type -> tronprotocol.NumberMessage
	88,  // 343: tronprotocol.Wallet.GetTransactionSign:output_type -> tronprotocol.Transaction
	35,  // 344: tronprotocol.Wallet.GetTransactionSign2:output_type -> tronprotocol.TransactionExtention
	19,  // 345: tronprotocol.Wallet.CreateAddress:output_type -> tronprotocol.BytesMessage
	33,  // 346: tronprotocol.Wallet.EasyTransferAsset:output_type -> tronprotocol.EasyTransferResponse
	33,  // 347: tronprotocol.Wallet.EasyTransferAssetByPrivate:output_type -> tronprotocol.EasyTransferResponse
	33,  // 348: tronprotocol.Wallet.EasyTransfer:output_type -> tronprotocol.EasyTransferResponse
	33,  // 349: tronprotocol.Wallet.EasyTransferByPrivate:output_type -> tronprotocol.EasyTransferResponse
	34,  // 350: tronprotocol.Wallet.GenerateAddress:output_type -> tronprotocol.AddressPrKeyPairMessage
	97,  // 351: tronprotocol.Wallet.GetTransactionInfoById:output_type -> tronprotocol.TransactionInfo
	35,  // 352: tronprotocol.Wallet.AccountPermissionUpdate:output_type -> tronprotocol.TransactionExtention
	35,  // 353: tronprotocol.Wallet.AddSign:output_type -> tronprotocol.TransactionExtention
	40,  // 354: tronprotocol.Wallet.GetTransactionSignWeight:output_type -> tronprotocol.TransactionSignWeight
	41,  // 355: tronprotocol.Wallet.GetTransactionApprovedList:output_type -> tronprotocol.TransactionApprovedList
	148, // 356: tronprotocol.Wallet.GetNodeInfo:output_type -> tronprotocol.NodeInfo
	18,  // 357: tronprotocol.Wallet.GetRewardInfo:output_type -> tronprotocol.NumberMessage
	18,  // 358: tronprotocol.Wallet.GetBrokerageInfo:output_type -> tronprotocol.NumberMessage
	35,  // 359: tronprotocol.Wallet.UpdateBrokerage:output_type -> tronprotocol.TransactionExtention
	35,  // 360: tronprotocol.Wallet.CreateShieldedTransaction:output_type -> tronprotocol.TransactionExtention
	149, // 361: tronprotocol.Wallet.GetMerkleTreeVoucherInfo:output_type -> tronprotocol.IncrementalMerkleVoucherInfo
	45,  // 362: tronprotocol.Wallet.ScanNoteByIvk:output_type -> tronprotocol.DecryptNotes
	46,  // 363: tronprotocol.Wallet.ScanAndMarkNoteByIvk:output_type -> tronprotocol.DecryptNotesMarked
	45,  // 364: tronprotocol.Wallet.ScanNoteByOvk:output_type -> tronprotocol.DecryptNotes
	19,  // 365: tronprotocol.Wallet.GetSpendingKey:output_type -> tronprotocol.BytesMessage
	54,  // 366: tronprotocol.Wallet.GetExpandedSpendingKey:output_type -> tronprotocol.ExpandedSpendingKeyMessage
	19,  // 367: tronprotocol.Wallet.GetAkFromAsk:output_type -> tronprotocol.BytesMessage
	19,  // 368: tronprotocol.Wallet.GetNkFromNsk:output_type -> tronprotocol.BytesMessage
	56,  // 369: tronprotocol.Wallet.GetIncomingViewingKey:output_type -> tronprotocol.IncomingViewingKeyMessage
	57,  // 370: tronprotocol.Wallet.GetDiversifier:output_type -> tronprotocol.DiversifierMessage
	60,  // 371: tronprotocol.Wallet.GetNewShieldedAddress:output_type -> tronprotocol.ShieldedAddressInfo
	59,  // 372: tronprotocol.Wallet.GetZenPaymentAddress:output_type -> tronprotocol.PaymentAddressMessage
	19,  // 373: tronprotocol.Wallet.GetRcm:output_type -> tronprotocol.BytesMessage
	62,  // 374: tronprotocol.Wallet.IsSpend:output_type -> tronprotocol.SpendResult
	35,  // 375: tronprotocol.Wallet.CreateShieldedTransactionWithoutSpendAuthSig:output_type -> tronprotocol.TransactionExtention
	19,  // 376: tronprotocol.Wallet.GetShieldTransactionHash:output_type -> tronprotocol.BytesMessage
	19,  // 377: tronprotocol.Wallet.CreateSpendAuthSig:output_type -> tronprotocol.BytesMessage
	19,  // 378: tronprotocol.Wallet.CreateShieldNullifier:output_type -> tronprotocol.BytesMessage
	67,  // 379: tronprotocol.Wallet.CreateShieldedContractParameters:output_type -> tronprotocol.ShieldedTRC20Parameters
	67,  // 380: tronprotocol.Wallet.CreateShieldedContractParametersWithoutAsk:output_type -> tronprotocol.ShieldedTRC20Parameters
	70,  // 381: tronprotocol.Wallet.ScanShieldedTRC20NotesByIvk:output_type -> tronprotocol.DecryptNotesTRC20
	70,  // 382: tronprotocol.Wallet.ScanShieldedTRC20NotesByOvk:output_type -> tronprotocol.DecryptNotesTRC20
	72,  // 383: tronprotocol.Wallet.IsShieldedTRC20ContractNoteSpent:output_type -> tronprotocol.NullifierResult
	19,  // 384: tronprotocol.Wallet.GetTriggerInputForShieldedTRC20Contract:output_type -> tronprotocol.BytesMessage
	35,  // 385: tronprotocol.Wallet.CreateCommonTransaction:output_type -> tronprotocol.TransactionExtention
	63,  // 386: tronprotocol.Wallet.GetTransactionInfoByBlockNum:output_type -> tronprotocol.TransactionInfoList
	18,  // 387: tronprotocol.Wallet.GetBurnTrx:output_type -> tronprotocol.NumberMessage
	88,  // 388: tronprotocol.Wallet.GetTransactionFromPending:output_type -> tronprotocol.Transaction
	11,  // 389: tronprotocol.Wallet.GetTransactionListFromPending:output_type -> tronprotocol.TransactionIdList
	18,  // 390: tronprotocol.Wallet.GetPendingSize:output_type -> tronprotocol.NumberMessage
	36,  // 391: tronprotocol.Wallet.GetBlock:output_type -> tronprotocol.BlockExtention
	90,  // 392: tronprotocol.WalletSolidity.GetAccount:output_type -> tronprotocol.Account
	90,  // 393: tronprotocol.WalletSolidity.GetAccountById:output_type -> tronprotocol.Account
	5,   // 394: tronprotocol.WalletSolidity.ListWitnesses:output_type -> tronprotocol.WitnessList
	8,   // 395: tronprotocol.WalletSolidity.GetAssetIssueList:output_type -> tronprotocol.AssetIssueList
	8,   // 396: tronprotocol.WalletSolidity.GetPaginatedAssetIssueList:output_type -> tronprotocol.AssetIssueList
	86,  // 397: tronprotocol.WalletSolidity.GetAssetIssueByName:output_type -> tronprotocol.AssetIssueContract
	8,   // 398: tronprotocol.WalletSolidity.GetAssetIssueListByName:output_type -> tronprotocol.AssetIssueList
	86,  // 399: tronprotocol.WalletSolidity.GetAssetIssueById:output_type -> tronprotocol.AssetIssueContract
	87,  // 400: tronprotocol.WalletSolidity.GetNowBlock:output_type -> tronprotocol.Block
	36,  // 401: tronprotocol.WalletSolidity.GetNowBlock2:output_type -> tronprotocol.BlockExtention
	87,  // 402: tronprotocol.WalletSolidity.GetBlockByNum:output_type -> tronprotocol.Block
	36,  // 403: tronprotocol.WalletSolidity.GetBlockByNum2:output_type -> tronprotocol.BlockExtention
	18,  // 404: tronprotocol.WalletSolidity.GetTransactionCountByBlockNum:output_type -> tronprotocol.NumberMessage
	13,  // 405: tronprotocol.WalletSolidity.GetDelegatedResource:output_type -> tronprotocol.DelegatedResourceList
	146, // 406: tronprotocol.WalletSolidity.GetDelegatedResourceAccountIndex:output_type -> tronprotocol.DelegatedResourceAccountIndex
	85,  // 407: tronprotocol.WalletSolidity.GetExchangeById:output_type -> tronprotocol.Exchange
	7,   // 408: tronprotocol.WalletSolidity.ListExchanges:output_type -> tronprotocol.ExchangeList
	88,  // 409: tronprotocol.WalletSolidity.GetTransactionById:output_type -> tronprotocol.Transaction
	97,  // 410: tronprotocol.WalletSolidity.GetTransactionInfoById:output_type -> tronprotocol.TransactionInfo
	34,  // 411: tronprotocol.WalletSolidity.GenerateAddress:output_type -> tronprotocol.AddressPrKeyPairMessage
	149, // 412: tronprotocol.WalletSolidity.GetMerkleTreeVoucherInfo:output_type -> tronprotocol.IncrementalMerkleVoucherInfo
	45,  // 413: tronprotocol.WalletSolidity.ScanNoteByIvk:output_type -> tronprotocol.DecryptNotes
	46,  // 414: tronprotocol.WalletSolidity.ScanAndMarkNoteByIvk:output_type -> tronprotocol.DecryptNotesMarked
	45,  // 415: tronprotocol.WalletSolidity.ScanNoteByOvk:output_type -> tronprotocol.DecryptNotes
	62,  // 416: tronprotocol.WalletSolidity.IsSpend:output_type -> tronprotocol.SpendResult
	70,  // 417: tronprotocol.WalletSolidity.ScanShieldedTRC20NotesByIvk:output_type -> tronprotocol.DecryptNotesTRC20
	70,  // 418: tronprotocol.WalletSolidity.ScanShieldedTRC20NotesByOvk:output_type -> tronprotocol.DecryptNotesTRC20
	72,  // 419: tronprotocol.WalletSolidity.IsShieldedTRC20ContractNoteSpent:output_type -> tronprotocol.NullifierResult
	18,  // 420: tronprotocol.WalletSolidity.GetRewardInfo:output_type -> tronprotocol.NumberMessage
	18,  // 421: tronprotocol.WalletSolidity.GetBrokerageInfo:output_type -> tronprotocol.NumberMessage
	35,  // 422: tronprotocol.WalletSolidity.TriggerConstantContract:output_type -> tronprotocol.TransactionExtention
	63,  // 423: tronprotocol.WalletSolidity.GetTransactionInfoByBlockNum:output_type -> tronprotocol.TransactionInfoList
	140, // 424: tronprotocol.WalletSolidity.GetMarketOrderById:output_type -> tronprotocol.MarketOrder
	141, // 425: tronprotocol.WalletSolidity.GetMarketOrderByAccount:output_type -> tronprotocol.MarketOrderList
	142, // 426: tronprotocol.WalletSolidity.GetMarketPriceByPair:output_type -> tronprotocol.MarketPriceList
	141, // 427: tronprotocol.WalletSolidity.GetMarketOrderListByPair:output_type -> tronprotocol.MarketOrderList
	143, // 428: tronprotocol.WalletSolidity.GetMarketPairList:output_type -> tronprotocol.MarketOrderPairList
	18,  // 429: tronprotocol.WalletSolidity.GetBurnTrx:output_type -> tronprotocol.NumberMessage
	36,  // 430: tronprotocol.WalletSolidity.GetBlock:output_type -> tronprotocol.BlockExtention
	10,  // 431: tronprotocol.WalletExtension.GetTransactionsFromThis:output_type -> tronprotocol.TransactionList
	38,  // 432: tronprotocol.WalletExtension.GetTransactionsFromThis2:output_type -> tronprotocol.TransactionListExtention
	10,  // 433: tronprotocol.WalletExtension.GetTransactionsToThis:output_type -> tronprotocol.TransactionList
	38,  // 434: tronprotocol.WalletExtension.GetTransactionsToThis2:output_type -> tronprotocol.TransactionListExtention
	4,   // 435: tronprotocol.Database.getBlockReference:output_type -> tronprotocol.BlockReference
	150, // 436: tronprotocol.Database.GetDynamicProperties:output_type -> tronprotocol.DynamicProperties
	87,  // 437: tronprotocol.Database.GetNowBlock:output_type -> tronprotocol.Block
	87,  // 438: tronprotocol.Database.GetBlockByNum:output_type -> tronprotocol.Block
	151, // 439: tronprotocol.Monitor.GetStatsInfo:output_type -> tronprotocol.MetricsInfo
	252, // [252:440] is the sub-list for method output_type
	64,  // [64:252] is the sub-list for method input_type
	64,  // [64:64] is the sub-list for extension type_name
	64,  // [64:64] is the sub-list for extension extendee
	0,   // [0:64] is the sub-list for field type_name
}

func init() { file_tronapi_api_proto_init() }
func file_tronapi_api_proto_init() {
	if File_tronapi_api_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tronapi_api_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Return); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposalList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetIssueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionIdList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedResourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatedResourceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NumberMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BytesMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountPaginated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimePaginatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountNetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountResourceMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaginatedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferAssetMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferByPrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferAssetByPrivateMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EasyTransferResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressPrKeyPairMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockListExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionListExtention); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlockIncrementalMerkleTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSignWeight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionApprovedList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IvkDecryptParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IvkDecryptAndMarkParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OvkDecryptParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesMarked); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReceiveNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateParametersWithoutAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendAuthSigParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpandedSpendingKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewingKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingViewingKeyMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiversifierMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IncomingViewingKeyDiversifierMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentAddressMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedAddressInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendNoteTRC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateShieldedTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrivateShieldedTRC20ParametersWithoutAsk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IvkDecryptTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OvkDecryptTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesTRC20); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NfTRC20Parameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullifierResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldedTRC20TriggerContractParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionSignWeight_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionApprovedList_Result); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotes_NoteTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesMarked_NoteTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tronapi_api_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecryptNotesTRC20_NoteTx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tronapi_api_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_tronapi_api_proto_goTypes,
		DependencyIndexes: file_tronapi_api_proto_depIdxs,
		EnumInfos:         file_tronapi_api_proto_enumTypes,
		MessageInfos:      file_tronapi_api_proto_msgTypes,
	}.Build()
	File_tronapi_api_proto = out.File
	file_tronapi_api_proto_rawDesc = nil
	file_tronapi_api_proto_goTypes = nil
	file_tronapi_api_proto_depIdxs = nil
}
